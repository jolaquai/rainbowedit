<?xml version="1.0"?>
<doc>
    <assembly>
        <name>rainbowedit</name>
    </assembly>
    <members>
        <member name="T:rainbowedit.Challenge">
            <summary>
            Represents a <i>Battle Pass</i> or Weekly <i>Ubisoft Connect</i> Challenge.
            </summary>
        </member>
        <member name="P:rainbowedit.Challenge.Type">
            <summary>
            The type of this <see cref="T:rainbowedit.Challenge"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Challenge.Operators">
            <summary>
            A collection of <see cref="T:rainbowedit.Operator"/> instances, representing the <see cref="T:rainbowedit.Operator"/>s that may be used to complete this <see cref="T:rainbowedit.Challenge"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Challenge.Extra">
            <summary>
            Extra data. See the <see cref="M:rainbowedit.Challenge.#ctor(rainbowedit.Challenge.ChallengeType,System.Object)"/> constructor for more information on how to set this, how it is used and what values it may take.
            </summary>
        </member>
        <member name="M:rainbowedit.Challenge.#ctor(rainbowedit.Operator[])">
            <summary>
            Initializes a new <see cref="T:rainbowedit.Challenge"/> from a series of <see cref="T:rainbowedit.Operator"/>s. This implies the <see cref="P:rainbowedit.Challenge.Type"/> to be <see cref="F:rainbowedit.Challenge.ChallengeType.Operators"/> or <see cref="F:rainbowedit.Challenge.ChallengeType.Organization"/>, the latter only if the passed <paramref name="operators"/> have matching <see cref="P:rainbowedit.Operator.Organization"/> values.
            </summary>
            <param name="operators">Any number of further <see cref="T:rainbowedit.Operator"/>s to associate with this <see cref="T:rainbowedit.Challenge"/>.</param>
        </member>
        <member name="M:rainbowedit.Challenge.#ctor(rainbowedit.Challenge.ChallengeType,System.Object)">
            <summary>
            Initializes a new <see cref="T:rainbowedit.Challenge"/> from a <see cref="T:rainbowedit.Challenge.ChallengeType"/> and <paramref name="extra"/> data, the nature of which depends on which <paramref name="challengeType"/> was passed:
            <list type="bullet">
            <item><see cref="F:rainbowedit.Challenge.ChallengeType.Operators"/>: <paramref name="extra"/> must be a Type convertible to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:rainbowedit.Operator"/>.</item>
            <item><see cref="F:rainbowedit.Challenge.ChallengeType.WeaponTypeKills"/>: <paramref name="extra"/> must be a <see cref="T:rainbowedit.Weapon.WeaponType"/> enum value. The <see cref="P:rainbowedit.Challenge.Extra"/> property is set to the passed value.</item>
            <item>For any other <see cref="T:rainbowedit.Challenge.ChallengeType"/>, <paramref name="extra"/> is ignored.</item>
            </list>
            </summary>
            <param name="challengeType">A <see cref="T:rainbowedit.Challenge.ChallengeType"/> enum value that identifies the type of this <see cref="T:rainbowedit.Challenge"/>.</param>
            <param name="extra">Extra data as described.</param>
            <exception cref="T:System.ArgumentException">Thrown if the Type of <paramref name="extra"/> is unexpected for the passed <paramref name="challengeType"/>.</exception>
        </member>
        <member name="T:rainbowedit.Challenge.ChallengeType">
            <summary>
            Identifies the type of a <see cref="T:rainbowedit.Challenge"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.Unspecified">
            <summary>
            Indicates that the type of a <see cref="T:rainbowedit.Challenge"/> is unspecified. This is considered an invalid value.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.Operators">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Challenge"/>'s requirement is winning rounds with specific <see cref="T:rainbowedit.Operator"/>s.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.Organization">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Challenge"/>'s requirement is winning rounds with <see cref="T:rainbowedit.Operator"/>s belonging to a specific organization. This includes the <see cref="F:rainbowedit.Challenge.ChallengeType.Operators"/> flag.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.WeaponTypeKills">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Challenge"/>'s requirement is killing opponents with a specific type of <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.Blind">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Challenge"/>'s requirement is blinding opponents using <i>Stun Grenade</i>s, <see cref="P:rainbowedit.Attackers.Ying"/>'s <i>Candela</i> or <see cref="P:rainbowedit.Attackers.Blitz"/>'s <i>Shield</i>.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.Disorient">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Challenge"/>'s requirement is disorienting opponents using <see cref="P:rainbowedit.Defenders.Echo"/>'s <i>Yokai</i>'s <i>Sonic Burst</i>s, <see cref="P:rainbowedit.Defenders.Ela"/>'s <i>Grzmot Mine</i>s, <see cref="P:rainbowedit.Defenders.Oryx"/>'s <i>Remah Dash</i> or <see cref="P:rainbowedit.Attackers.Zofia"/>'s <i>Shock Grenade</i>s.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.Universal">
            <summary>
            Indicates that the specific requirement of a <see cref="T:rainbowedit.Challenge"/> is not specific to any <see cref="T:rainbowedit.Operator"/>s.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.GadgetMelee">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Challenge"/>'s requirement is eliminating opponents using gadgets or melee attacks. This is a type of <see cref="F:rainbowedit.Challenge.ChallengeType.Universal"/> <see cref="T:rainbowedit.Challenge"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.SuppressedKills">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Challenge"/>'s requirement is eliminating opponents with <see cref="T:rainbowedit.Weapon"/>s that have a <see cref="F:rainbowedit.Weapon.Barrel.Suppressor"/> equipped. This is a type of <see cref="F:rainbowedit.Challenge.ChallengeType.Universal"/> <see cref="T:rainbowedit.Challenge"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.Headshots">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Challenge"/>'s requirement is eliminating opponents using headshots. This is a type of <see cref="F:rainbowedit.Challenge.ChallengeType.Universal"/> <see cref="T:rainbowedit.Challenge"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.Rappel">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Challenge"/>'s requirement is eliminating opponents while in rappel (<i>"Death from above"</i>). This is a type of <see cref="F:rainbowedit.Challenge.ChallengeType.Universal"/> <see cref="T:rainbowedit.Challenge"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.Damage">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Challenge"/>'s requirement is dealing damage to opponents. This is a type of <see cref="F:rainbowedit.Challenge.ChallengeType.Universal"/> <see cref="T:rainbowedit.Challenge"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.BulletHits">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Challenge"/>'s requirement is hitting opponents with bullets. This is a type of <see cref="F:rainbowedit.Challenge.ChallengeType.Universal"/> <see cref="T:rainbowedit.Challenge"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.GadgetDestroy">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Challenge"/>'s requirement is destroying opponent gadgets or special abilities. This is a type of <see cref="F:rainbowedit.Challenge.ChallengeType.Universal"/> <see cref="T:rainbowedit.Challenge"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.ObservationDestroy">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Challenge"/>'s requirement is destroying opponents' observation tools. This is a type of <see cref="F:rainbowedit.Challenge.ChallengeType.Universal"/> <see cref="T:rainbowedit.Challenge"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.QuickMatch">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Challenge"/>'s requirement is winning rounds in the <i>Quick Match</i> game mode. This is a type of <see cref="F:rainbowedit.Challenge.ChallengeType.Universal"/> <see cref="T:rainbowedit.Challenge"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Challenge.ChallengeType.Ranked">
            /// <summary>
            Indicates that a <see cref="T:rainbowedit.Challenge"/>'s requirement is playing matches in the <i>Ranked</i> game mode. This is a type of <see cref="F:rainbowedit.Challenge.ChallengeType.Universal"/> <see cref="T:rainbowedit.Challenge"/>.
            </summary>
        </member>
        <member name="M:rainbowedit.Challenge.ConstructOperatorMapping(rainbowedit.Challenge[])">
            <summary>
            Constructs a mapping from <see cref="T:rainbowedit.Operator"/>s to the given <paramref name="challenges"/>.
            </summary>
            <param name="challenges">The <see cref="T:rainbowedit.Challenge"/>s to map.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> that maps <paramref name="challenges"/> to the <see cref="T:rainbowedit.Operator"/>s that cam compelte them.</returns>
        </member>
        <member name="M:rainbowedit.Challenge.ConstructChallengeMapping(rainbowedit.Challenge[])">
            <summary>
            Compiles the <see cref="T:rainbowedit.Operator"/>s that can complete the given <paramref name="challenges"/> into a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            /// <param name="challenges">The <see cref="T:rainbowedit.Challenge"/>s to map.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> that maps Operators that can complete them to the given <paramref name="challenges"/>.</returns>
            <returns>An inverted <see cref="T:System.Collections.Generic.Dictionary`2"/> as described.</returns>
        </member>
        <member name="M:rainbowedit.Challenge.ToString">
            <inheritdoc/>
        </member>
        <member name="T:rainbowedit.Examples">
            <summary>
            A number of examples you can use to get the hang of how the library works or what you could do with it.
            </summary>
        </member>
        <member name="M:rainbowedit.Examples.ShotsToKill(rainbowedit.Operator,rainbowedit.WeaponConfiguration,System.Boolean)">
            <summary>
            Calculates the shots it takes to kill an <paramref name="operator"/> using a given <paramref name="weaponConfig"/>, optionally considering the <c>20</c> extra HP one of <see cref="P:rainbowedit.Defenders.Rook"/>'s <i>Armor Plates</i> gives.
            </summary>
            <param name="operator">The <see cref="T:rainbowedit.Defender"/> to calculate the shots to kill for.</param>
            <param name="weaponConfig">The <see cref="T:rainbowedit.WeaponConfiguration"/> that is used to shoot the <paramref name="operator"/>.</param>
            <param name="armorPlate">Whether to consider the <c>20</c> extra HP one of <see cref="P:rainbowedit.Defenders.Rook"/>'s <i>Armor Plates</i> gives.</param>
            <returns></returns>
        </member>
        <member name="M:rainbowedit.Examples.OperatorsByWeaponType">
            <summary>
            Groups all <see cref="T:rainbowedit.Operator"/>s in the order of <see cref="P:rainbowedit.Siege.DefAtk"/> by which <see cref="T:rainbowedit.Weapon.WeaponType"/>s they have access to.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> where the keys are <see cref="T:rainbowedit.Weapon.WeaponType"/> enum values and the values are a collection of <see cref="T:rainbowedit.Operator"/> objects.</returns>
        </member>
        <member name="M:rainbowedit.Examples.WriteSpecialtiesAndOperators">
            <summary>
            Writes all specialties and the <see cref="T:rainbowedit.Operator"/>s that have them assigned to the <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="M:rainbowedit.Examples.OperatorsWithWeaponOfType(rainbowedit.Weapon.WeaponType)">
            <summary>
            Creates a sequence of <see cref="T:rainbowedit.Operator"/> instances that have access to a given <see cref="T:rainbowedit.Weapon.WeaponType"/>.
            </summary>
            <param name="type">The <see cref="T:rainbowedit.Weapon.WeaponType"/> to filter by.</param>
            <returns>The sequence of <see cref="T:rainbowedit.Operator"/>s.</returns>
        </member>
        <member name="M:rainbowedit.Examples.WeaponsOfType(rainbowedit.Weapon.WeaponType)">
            <summary>
            Creates a sequence of <see cref="T:rainbowedit.Weapon"/> instances that are of a given <see cref="T:rainbowedit.Weapon.WeaponType"/>.
            </summary>
            <param name="type">The <see cref="T:rainbowedit.Weapon.WeaponType"/> to filter by.</param>
            <returns>The sequence of <see cref="T:rainbowedit.Weapon"/>s.</returns>
        </member>
        <member name="T:rainbowedit.Exceptions.EnumStringificationException`1">
            <summary>
            The exception that is thrown when an enum value is attempted to be represented by a string that does not match it inside a <see cref="T:rainbowedit.WeaponConfiguration"/>.
            </summary>
        </member>
        <member name="M:rainbowedit.Exceptions.EnumStringificationException`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new <see cref="T:rainbowedit.Exceptions.EnumStringificationException`1"/> with a given <typeparamref name="TEnum"/> and <paramref name="string"/>.
            </summary>
            <param name="enum">The enum value of type <typeparamref name="TEnum"/> that was attempted to be represented by <paramref name="string"/>.</param>
            <param name="string">The string representation that did not match the actual value of <paramref name="enum"/>.</param>
        </member>
        <member name="M:rainbowedit.Exceptions.EnumStringificationException`1.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:rainbowedit.Exceptions.EnumStringificationException`1"/> with a given <paramref name="string"/>.
            </summary>
            <param name="string">The string representation that did not match any actual value <typeparamref name="TEnum"/> can have.</param>
        </member>
        <member name="T:rainbowedit.Exceptions.InvalidOperatorException">
            <summary>
            The exception that is thrown when an attempt is made to instantiate or retrieve an invalid <see cref="T:rainbowedit.Operator"/> instance.
            </summary>
        </member>
        <member name="T:rainbowedit.Exceptions.LoadoutOperatorMismatchException">
            <summary>
            The exception that is thrown when any part of a loadout is attempted to be brought in connection with an <see cref="T:rainbowedit.Operator"/> that it does not match with inside a <see cref="T:rainbowedit.LoadoutConfiguration"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Exceptions.LoadoutOperatorMismatchException.Operator">
            <summary>
            The <see cref="T:rainbowedit.Operator"/> that was targeted.
            </summary>
        </member>
        <member name="P:rainbowedit.Exceptions.LoadoutOperatorMismatchException.Type">
            <summary>
            The type of the <see cref="P:rainbowedit.Exceptions.LoadoutOperatorMismatchException.Value"/> that was attempted to be brought in connection with <see cref="P:rainbowedit.Exceptions.LoadoutOperatorMismatchException.Operator"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Exceptions.LoadoutOperatorMismatchException.Value">
            <summary>
            The erroneous value of Type <see cref="P:rainbowedit.Exceptions.LoadoutOperatorMismatchException.Type"/> that was attempted to be brought in connection with <see cref="P:rainbowedit.Exceptions.LoadoutOperatorMismatchException.Operator"/>.
            </summary>
        </member>
        <member name="M:rainbowedit.Exceptions.LoadoutOperatorMismatchException.#ctor(rainbowedit.Operator,System.Object)">
            <summary>
            Initializes a new <see cref="T:rainbowedit.Exceptions.LoadoutOperatorMismatchException"/> with a given <paramref name="operator"/> and <paramref name="value"/>.
            </summary>
            <param name="value">The value that was attempted to be brought in connection with <paramref name="operator"/>.</param>
            <param name="operator">The <see cref="T:rainbowedit.Operator"/> that was targeted despite the <paramref name="value"/> not belonging to them.</param>
        </member>
        <member name="T:rainbowedit.Extensions.EnumExtensions">
            <summary>
            Provides extensions for the <see cref="T:System.Enum"/> type and derived types.
            </summary>
        </member>
        <member name="M:rainbowedit.Extensions.EnumExtensions.GetValues``1">
            <summary>
            Gets all possible values a value of the specified <typeparamref name="TEnum"/> can have.
            </summary>
            <typeparam name="TEnum">The <see cref="T:System.Enum"/> type to retrieve the values for.</typeparam>
            <returns>An array of all possible values a value of the specified <typeparamref name="TEnum"/> can have, excluding the zero value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified <typeparamref name="TEnum"/> is not marked with the <see cref="T:System.FlagsAttribute"/>.</exception>
        </member>
        <member name="M:rainbowedit.Extensions.EnumExtensions.GetFlags``1(``0)">
            <summary>
            Retrieves all flags that are currently set in the specified <typeparamref name="TEnum"/> value.
            Because this implicitly makes <paramref name="any"/> a bitwise-AND combination of the resulting flags, it is only included in the result set if its underlying value is a named <see langword="enum"/> value.
            </summary>
            <typeparam name="TEnum">The <see cref="T:System.Enum"/> type to retrieve the flags for.</typeparam>
            <param name="any">The <typeparamref name="TEnum"/> value to retrieve the flags for.</param>
            <returns>The flags that are currently set in the specified <typeparamref name="TEnum"/> value or an empty array if no flags are set.</returns>
        </member>
        <member name="M:rainbowedit.Extensions.EnumExtensions.HasValue``1(``0)">
            <summary>
            Determines if an enum value <paramref name="source"/> of <typeparamref name="T"/> has a non-zero value.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="source">The enum value to test.</param>
            <returns>A value indicating whether <paramref name="source"/> has a non-zero value.</returns>
        </member>
        <member name="M:rainbowedit.Extensions.EnumExtensions.HasValue``1(``0,``0)">
            <summary>
            Determines if an enum value <paramref name="source"/> of <typeparamref name="T"/> has at least one value that another <paramref name="value"/> also has. May not work correctly with non-<see cref="T:System.FlagsAttribute"/> enums.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="source">The enum value to test.</param>
            <param name="value">An enum value that is checked against.</param>
            <returns>A value indicating whether <paramref name="source"/> has at least one value that <paramref name="value"/> also has.</returns>
        </member>
        <member name="M:rainbowedit.Extensions.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            Returns the <see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> for the given <see cref="T:System.Enum"/> value. If the value is not decorated with a <see cref="T:System.ComponentModel.DescriptionAttribute"/>, the default <see cref="T:System.String"/> representation of the value is returned.
            </summary>
            <param name="any">The <see cref="T:System.Enum"/> value to retrieve the description for.</param>
            <returns>The value of the <see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> for the given <see cref="T:System.Enum"/> value or its default <see cref="T:System.String"/> representation.</returns>
        </member>
        <member name="T:rainbowedit.Extensions.IEnumerableExtensions">
            <summary>
            Provides extensions for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> type and derived types.
            </summary>
        </member>
        <member name="M:rainbowedit.Extensions.IEnumerableExtensions.Remove``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Removes an item from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="source">The collection to remove <paramref name="item"/> from.</param>
            <param name="item">The item to remove.</param>
            <returns>A copy of the original collection with <paramref name="item"/> removed if it was present.</returns>
        </member>
        <member name="M:rainbowedit.Extensions.IEnumerableExtensions.Random``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Returns a random item from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            An attempt is made to do this without enumerating the entire sequence. If this fails, the sequence will be enumerated.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the items in <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to choose an item from.</param>
            <param name="random">A <see cref="T:System.Random"/> instance to use for generating random numbers. If <see langword="null"/>, a new instance will be created for each call.</param>
            <returns>A random item from <paramref name="source"/>.</returns>
        </member>
        <member name="M:rainbowedit.Extensions.IEnumerableExtensions.Random``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean,System.Random)">
            <summary>
            Returns <paramref name="count"/> random items from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>, optionally ensuring <paramref name="noDuplicates"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the items in <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to choose an item from.</param>
            <param name="count">The number of items to return.</param>
            <param name="noDuplicates">Whether to ensure no duplicate items are returned.</param>
            <returns>A random item from <paramref name="source"/>.</returns>
        </member>
        <member name="M:rainbowedit.Extensions.IEnumerableExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>
            Determines whether a sequence contains a specified element by using a specified comparer function.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to search.</param>
            <param name="value">The value to locate in the sequence.</param>
            <param name="comparer">The function that compares elements and ultimately determines whether <paramref name="source"/> contains <paramref name="value"/>.</param>
            <returns>A value indicating whether <paramref name="source"/> contains <paramref name="value"/>.</returns>
        </member>
        <member name="M:rainbowedit.Extensions.IEnumerableExtensions.Divide``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Divides a sequence into <paramref name="count"/> smaller sequences of equal length (or near-equal, if <paramref name="source"/>'s length is not divisible by <paramref name="count"/>).
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to divide.</param>
            <param name="count">The number of smaller sequences to divide <paramref name="source"/> into.</param>
            <returns>A sequence of <paramref name="count"/> sequences of <typeparamref name="T"/> containing all elements of <paramref name="source"/>.</returns>
        </member>
        <member name="T:rainbowedit.Extensions.StringExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.String"/> type.
            </summary>
        </member>
        <member name="M:rainbowedit.Extensions.StringExtensions.GetSimilarity(System.String,System.String,System.StringComparer)">
            <summary>
            Computes a value that indicates the similarity between two strings. "Similarity" is defined as the number of characters that are the same in both strings, divided by the length of the longer string. As such, the value returned by this method is always between <c>0</c> (the strings are have no characters in common) and <c>1</c> (the strings are equal), inclusive.
            </summary>
            <param name="first">The first <see cref="T:System.String"/> to use for the comparison.</param>
            <param name="second">The second <see cref="T:System.String"/> to use for the comparison.</param>
            <param name="stringComparer">A <see cref="T:System.StringComparer"/> instance to use when comparing the <see cref="T:System.String"/>s. Defaults to <see cref="P:System.StringComparer.OrdinalIgnoreCase"/>.</param>
            <returns>The computed similarity as described.</returns>
        </member>
        <member name="T:rainbowedit.Attackers">
            <summary>
            The <see cref="T:rainbowedit.Attackers"/> in Siege.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.All">
            <summary>
            Retrieves a <see cref="T:System.Collections.Generic.List`1"/> of all <see cref="T:rainbowedit.Attacker"/>s.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Specialties">
            <summary>
            Gets a <see cref="T:rainbowedit.Models.AttackerSpecialties"/> instance that contains the <see cref="T:rainbowedit.Models.Specialty"/> instances for <see cref="T:rainbowedit.Attacker"/>s.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Striker">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> Recruit <see cref="P:rainbowedit.Attackers.Striker"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Sledge">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Sledge"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Thatcher">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Thatcher"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Ash">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Ash"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Thermite">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Thermite"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Twitch">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Twitch"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Montagne">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Montagne"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Glaz">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Glaz"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Fuze">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Fuze"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Blitz">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Blitz"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.IQ">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.IQ"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Buck">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Buck"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Blackbeard">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Blackbeard"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Capitao">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Capitao"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Hibana">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Hibana"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Jackal">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Jackal"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Ying">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Ying"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Zofia">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Zofia"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Dokkaebi">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Dokkaebi"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Lion">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Lion"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Finka">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Finka"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Maverick">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Maverick"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Nomad">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Nomad"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Gridlock">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Gridlock"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Nokk">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Nokk"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Amaru">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Amaru"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Kali">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Kali"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Iana">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Iana"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Ace">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Ace"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Zero">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Zero"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Flores">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Flores"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Osa">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Osa"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Sens">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Sens"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Grim">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Grim"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Brava">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Brava"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Ram">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Ram"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Attackers.Deimos">
            <summary>
            The <see cref="T:rainbowedit.Attacker"/> <see cref="P:rainbowedit.Attackers.Deimos"/>.
            </summary>
        </member>
        <member name="M:rainbowedit.Attackers.GetPersonalSpecialtyChallengeSet(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Compiles specific challenges from all <see cref="T:rainbowedit.Attackers"/>' specialties into a collection.
            </summary>
            <param name="breach">The <see cref="T:rainbowedit.Models.Specialty.Challenge" /> to retrieve for the <see cref="P:rainbowedit.Models.AttackerSpecialties.Breach" /> <see cref="T:rainbowedit.Models.Specialty" />.</param>
            <param name="support">The <see cref="T:rainbowedit.Models.Specialty.Challenge" /> to retrieve for the <see cref="P:rainbowedit.Models.AttackerSpecialties.Support" /> <see cref="T:rainbowedit.Models.Specialty" />.</param>
            <param name="frontline">The <see cref="T:rainbowedit.Models.Specialty.Challenge" /> to retrieve for the <see cref="P:rainbowedit.Models.AttackerSpecialties.FrontLine" /> <see cref="T:rainbowedit.Models.Specialty" />.</param>
            <param name="intel">The <see cref="T:rainbowedit.Models.Specialty.Challenge" /> to retrieve for the <see cref="P:rainbowedit.Models.AttackerSpecialties.Intel" /> <see cref="T:rainbowedit.Models.Specialty" />.</param>
            <param name="antigadget">The <see cref="T:rainbowedit.Models.Specialty.Challenge" /> to retrieve for the <see cref="P:rainbowedit.Models.AttackerSpecialties.AntiGadget" /> <see cref="T:rainbowedit.Models.Specialty" />.</param>
            <param name="mapcontrol">The <see cref="T:rainbowedit.Models.Specialty.Challenge" /> to retrieve for the <see cref="P:rainbowedit.Models.AttackerSpecialties.MapControl" /> <see cref="T:rainbowedit.Models.Specialty" />.</param>
            <returns>An <see cref="T:System.Collections.Immutable.ImmutableDictionary`2"/> that maps <see cref="T:rainbowedit.Models.Specialty"/> instances corresponding to the supplied progress values to their respective next <see cref="T:rainbowedit.Models.Specialty.Challenge"/>s.</returns>
        </member>
        <member name="T:rainbowedit.Defenders">
            <summary>
            The <see cref="T:rainbowedit.Defenders"/> in Siege.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.All">
            <summary>
            Retrieves a <see cref="T:System.Collections.Generic.List`1"/> of all <see cref="T:rainbowedit.Defender"/>s.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Specialties">
            <summary>
            Gets a <see cref="T:rainbowedit.Models.DefenderSpecialties"/> instance that contains the <see cref="T:rainbowedit.Models.Specialty"/> instances for <see cref="T:rainbowedit.Defender"/>s.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Sentry">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> Recruit <see cref="P:rainbowedit.Defenders.Sentry"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Smoke">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Smoke"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Mute">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Mute"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Castle">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Castle"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Pulse">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Pulse"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Doc">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Doc"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Rook">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Rook"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Kapkan">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Kapkan"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Tachanka">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Tachanka"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Jäger">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Jäger"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Bandit">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Bandit"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Frost">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Frost"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Valkyrie">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Valkyrie"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Caveira">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Caveira"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Echo">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Echo"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Mira">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Mira"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Lesion">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Lesion"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Ela">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Ela"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Vigil">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Vigil"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Maestro">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Maestro"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Alibi">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Alibi"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Clash">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Clash"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Kaid">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Kaid"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Mozzie">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Mozzie"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Warden">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Warden"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Goyo">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Goyo"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Wamai">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Wamai"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Oryx">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Oryx"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Melusi">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Melusi"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Aruni">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Aruni"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Thunderbird">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Thunderbird"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Thorn">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Thorn"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Azami">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Azami"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Solis">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Solis"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Fenrir">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Fenrir"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Defenders.Tubarao">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> <see cref="P:rainbowedit.Defenders.Tubarao"/>.
            </summary>
        </member>
        <member name="M:rainbowedit.Defenders.GetPersonalSpecialtyChallengeSet(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Compiles specific challenges from all <see cref="T:rainbowedit.Defenders"/>' specialties into a collection.
            </summary>
            <param name="trapper">The <see cref="T:rainbowedit.Models.Specialty.Challenge" /> to retrieve for the <see cref="P:rainbowedit.Models.DefenderSpecialties.Trapper" /> <see cref="T:rainbowedit.Models.Specialty" />.</param>
            <param name="support">The <see cref="T:rainbowedit.Models.Specialty.Challenge" /> to retrieve for the <see cref="P:rainbowedit.Models.DefenderSpecialties.Support" /> <see cref="T:rainbowedit.Models.Specialty" />.</param>
            <param name="antientry">The <see cref="T:rainbowedit.Models.Specialty.Challenge" /> to retrieve for the <see cref="P:rainbowedit.Models.DefenderSpecialties.AntiEntry" /> <see cref="T:rainbowedit.Models.Specialty" />.</param>
            <param name="intel">The <see cref="T:rainbowedit.Models.Specialty.Challenge" /> to retrieve for the <see cref="P:rainbowedit.Models.DefenderSpecialties.Intel" /> <see cref="T:rainbowedit.Models.Specialty" />.</param>
            <param name="antigadget">The <see cref="T:rainbowedit.Models.Specialty.Challenge" /> to retrieve for the <see cref="P:rainbowedit.Models.DefenderSpecialties.AntiGadget" /> <see cref="T:rainbowedit.Models.Specialty" />.</param>
            <param name="crowdcontrol">The <see cref="T:rainbowedit.Models.Specialty.Challenge" /> to retrieve for the <see cref="P:rainbowedit.Models.DefenderSpecialties.CrowdControl" /> <see cref="T:rainbowedit.Models.Specialty" />.</param>
            <returns>An <see cref="T:System.Collections.Immutable.ImmutableDictionary`2"/> that maps <see cref="T:rainbowedit.Models.Specialty"/> instances corresponding to the supplied progress values to their respective next <see cref="T:rainbowedit.Models.Specialty.Challenge"/>s.</returns>
        </member>
        <member name="T:rainbowedit.Operator">
            <summary>
            Represents an <see cref="T:rainbowedit.Operator"/> in Siege.
            </summary>
            <remarks>
            <para/>Implements <see cref="T:System.IEquatable`1"/> of <see cref="T:rainbowedit.Operator"/> which enables compares <see cref="T:rainbowedit.Operator"/>s by their <see cref="P:rainbowedit.Operator.Nickname"/>.
            <para/>Implements <see cref="T:System.IComparable`1"/> of <see cref="T:rainbowedit.Operator"/> which enables sorting <see cref="T:rainbowedit.Operator"/>s according to their in-game sorting order.
            </remarks>
        </member>
        <member name="P:rainbowedit.Operator.Nickname">
            <summary>
            The nickname of the <see cref="T:rainbowedit.Operator"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.Primaries">
            <summary>
            A collection of <see cref="T:rainbowedit.Weapon"/> objects, containing information about the primary weapons the <see cref="T:rainbowedit.Operator"/> may use.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.Secondaries">
            <summary>
            A collection of <see cref="T:rainbowedit.Weapon"/> objects, containing information about the secondary weapons the <see cref="T:rainbowedit.Operator"/> may use.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.Gadgets">
            <summary>
            A combination of <see cref="T:rainbowedit.Weapon.Gadget"/> values that specifies which gadgets the <see cref="T:rainbowedit.Operator"/> may choose from.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.SpecialAbility">
            <summary>
            The name of the <see cref="T:rainbowedit.Operator"/>'s special ability.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.Specialties">
            <summary>
            A collection of <see cref="T:rainbowedit.Models.Specialty"/> objects representing the <see cref="T:rainbowedit.Operator"/>'s assigned specialties.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.Organization">
            <summary>
            The name of the organization the <see cref="T:rainbowedit.Operator"/> belongs to.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.Birthplace">
            <summary>
            The <see cref="T:rainbowedit.Defender"/>'s birthplace.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.Height">
            <summary>
            The <see cref="T:rainbowedit.Defender"/>'s height in whole and fractional centimeters.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.Weight">
            <summary>
            The <see cref="T:rainbowedit.Defender"/>'s weight in whole and fractional kilograms.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.RealName">
            <summary>
            The in-game real name of the <see cref="T:rainbowedit.Operator"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.Age">
            <summary>
            An <see cref="T:rainbowedit.OperatorAge"/> instance specifying the <see cref="T:rainbowedit.Operator"/>'s day and month of birth and their age.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.Speed">
            <summary>
            The <see cref="T:rainbowedit.Defender"/>'s speed rating.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.Health">
            <summary>
            The <see cref="T:rainbowedit.Defender"/>'s health rating.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.HP">
            <summary>
            The <see cref="T:rainbowedit.Defender"/>'s base health / HP value.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.IsDefender">
            <summary>
            Indicates whether this <see cref="T:rainbowedit.Operator"/> is one of the <see cref="T:rainbowedit.Defenders"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Operator.IsAttacker">
            <summary>
            Indicates whether this <see cref="T:rainbowedit.Operator"/> is one of the <see cref="T:rainbowedit.Attackers"/>.
            </summary>
        </member>
        <member name="M:rainbowedit.Operator.#ctor(System.String,System.Collections.Immutable.ImmutableArray{rainbowedit.Weapon},System.Collections.Immutable.ImmutableArray{rainbowedit.Weapon},rainbowedit.Weapon.Gadget,System.String,System.Collections.Immutable.ImmutableArray{rainbowedit.Models.Specialty},System.String,System.String,System.Decimal,System.Decimal,System.String,rainbowedit.OperatorAge,System.Int32)">
            <summary>
            Initializes a new <see cref="T:rainbowedit.Operator"/> object.
            </summary>
            <param name="nickname">The nickname of the <see cref="T:rainbowedit.Operator"/>.</param>
            <param name="primaries">A collection of <see cref="T:rainbowedit.Weapon"/> objects, containing information about the primary weapons the <see cref="T:rainbowedit.Operator"/> may use.</param>
            <param name="secondaries">A collection of <see cref="T:rainbowedit.Weapon"/> objects, containing information about the secondary weapons the <see cref="T:rainbowedit.Operator"/> may use.</param>
            <param name="gadgets">A combination of <see cref="T:rainbowedit.Weapon.Gadget"/> values that specifies which gadgets the <see cref="T:rainbowedit.Operator"/> may choose from.</param>
            <param name="specialAbility">The name of the <see cref="T:rainbowedit.Operator"/>'s special ability.</param>
            <param name="specialties">A collection of <see cref="T:rainbowedit.Models.Specialty"/> objects representing the <see cref="T:rainbowedit.Operator"/>'s assigned specialties.</param>
            <param name="organization">The name of the organization the <see cref="T:rainbowedit.Operator"/> belongs to.</param>
            <param name="birthplace">The <see cref="T:rainbowedit.Defender"/>'s birthplace.</param>
            <param name="height">The <see cref="T:rainbowedit.Defender"/>'s height in whole and fractional centimeters.</param>
            <param name="weight">The <see cref="T:rainbowedit.Defender"/>'s weight in whole and fractional kilograms.</param>
            <param name="realName">The in-game real name of the <see cref="T:rainbowedit.Operator"/>.</param>
            <param name="age">An <see cref="T:rainbowedit.OperatorAge"/> instance specifying the <see cref="T:rainbowedit.Operator"/>'s day and month of birth and their age.</param>
            <param name="speed">The <see cref="T:rainbowedit.Defender"/>'s speed rating.</param>
        </member>
        <member name="M:rainbowedit.Operator.GetRandomLoadout">
            <summary>
            Creates a <see cref="T:rainbowedit.LoadoutConfiguration"/> from all possible <see cref="P:rainbowedit.Operator.Primaries"/>, <see cref="P:rainbowedit.Operator.Secondaries"/> (and those two's respective <see cref="P:rainbowedit.Weapon.Barrels"/>, <see cref="P:rainbowedit.Weapon.Grips"/>, <see cref="P:rainbowedit.Weapon.Sights"/> and <see cref="P:rainbowedit.Weapon.Underbarrel"/> options) and <see cref="P:rainbowedit.Operator.Gadgets"/> loadout combinations.
            </summary>
            <returns>A <see cref="T:rainbowedit.LoadoutConfiguration"/> as described.</returns>
        </member>
        <member name="M:rainbowedit.Operator.ToString">
            <inheritdoc/>
        </member>
        <member name="M:rainbowedit.Operator.Order(System.Collections.Generic.IEnumerable{rainbowedit.Operator})">
            <summary>
            Returns a copy of a collection of <see cref="T:rainbowedit.Operator"/> objects sorted in the order they appear in-game.
            The collection may be immutable.
            </summary>
            <param name="sequence">The collection to sort.</param>
            <returns>The sorted collection as described.</returns>
        </member>
        <member name="M:rainbowedit.Operator.Sort(System.Collections.Generic.ICollection{rainbowedit.Operator})">
            <summary>
            Sorts a collection of <see cref="T:rainbowedit.Operator"/> objects in the order they appear in-game.
            The collection must be mutable.
            </summary>
            <param name="collection">The collection to sort.</param>
        </member>
        <member name="P:rainbowedit.Operator.Comparer">
            <summary>
            An <see cref="T:System.Collections.Generic.IComparer`1"/> implementation for <see cref="T:rainbowedit.Operator"/> objects that may be used to sort a collection of <see cref="T:rainbowedit.Operator"/> objects by the order they appear in-game.
            </summary>
            <remarks>You may use this directly for custom implementations or use <see cref="!:Sort(IEnumerable&lt;Operator&gt;)"/> or <see cref="M:rainbowedit.Operator.Order(System.Collections.Generic.IEnumerable{rainbowedit.Operator})"/>.</remarks>
        </member>
        <member name="M:rainbowedit.Operator.op_Implicit(rainbowedit.Operator)~System.String">
            <summary>
            Implicitly converts an <see cref="T:rainbowedit.Operator"/> to a <see cref="T:System.String"/> that represents the <see cref="T:rainbowedit.Operator"/>.
            </summary>
            <param name="op">The <see cref="T:rainbowedit.Defender"/> to convert.</param>
        </member>
        <member name="M:rainbowedit.Operator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:rainbowedit.Operator.Equals(rainbowedit.Operator)">
            <inheritdoc/>
        </member>
        <member name="M:rainbowedit.Operator.GetHashCode">
            <summary>
            Computes a <see cref="T:System.HashCode"/> for the current <see cref="T:rainbowedit.Operator"/> object.
            </summary>
            <returns>The computed hash code as an <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:rainbowedit.Operator.op_Equality(rainbowedit.Operator,rainbowedit.Operator)">
            <summary>
            Gets a value that indicates whether two <see cref="T:rainbowedit.Operator"/> objects are equal.
            </summary>
            <param name="left">The left <see cref="T:rainbowedit.Operator"/> to compare.</param>
            <param name="right">The right <see cref="T:rainbowedit.Operator"/> to compare.</param>
            <returns>A value that indicates whether <paramref name="left"/> and <paramref name="right"/> are equal.</returns>
        </member>
        <member name="M:rainbowedit.Operator.op_Inequality(rainbowedit.Operator,rainbowedit.Operator)">
            <summary>
            Gets a value that indicates whether two <see cref="T:rainbowedit.Operator"/> objects are not equal.
            </summary>
            <param name="left">The left <see cref="T:rainbowedit.Operator"/> to compare.</param>
            <param name="right">The right <see cref="T:rainbowedit.Operator"/> to compare.</param>
            <returns>A value that indicates whether <paramref name="left"/> and <paramref name="right"/> are not equal.</returns>
        </member>
        <member name="M:rainbowedit.Operator.op_LessThan(rainbowedit.Operator,rainbowedit.Operator)">
            <summary>
            Gets a value that indicates whether the left operand appears before the right operand in the in-game order of <see cref="T:rainbowedit.Operator"/> objects.
            </summary>
            <param name="left">The first <see cref="T:rainbowedit.Operator"/> to consider for the comparison.</param>
            <param name="right">The second <see cref="T:rainbowedit.Operator"/> to consider for the comparison.</param>
            <returns>A <see cref="T:System.Boolean"/> value as described.</returns>
            <remarks><see cref="T:rainbowedit.Defenders"/> are always considered lesser than <see cref="T:rainbowedit.Attackers"/> for this comparison.</remarks>
        </member>
        <member name="M:rainbowedit.Operator.op_GreaterThan(rainbowedit.Operator,rainbowedit.Operator)">
            <summary>
            Gets a value that indicates whether the left operand appears after the right operand in the in-game order of <see cref="T:rainbowedit.Operator"/> objects.
            </summary>
            <param name="left">The first <see cref="T:rainbowedit.Operator"/> to consider for the comparison.</param>
            <param name="right">The second <see cref="T:rainbowedit.Operator"/> to consider for the comparison.</param>
            <returns>A <see cref="T:System.Boolean"/> value as described.</returns>
            <remarks><see cref="T:rainbowedit.Defenders"/> are always considered lesser than <see cref="T:rainbowedit.Attackers"/> for this comparison.</remarks>
        </member>
        <member name="M:rainbowedit.Operator.op_LessThanOrEqual(rainbowedit.Operator,rainbowedit.Operator)">
            <summary>
            Gets a value that indicates whether the left operand appears before or in the same position as the right operand in the in-game order of <see cref="T:rainbowedit.Operator"/> objects.
            </summary>
            <param name="left">The first <see cref="T:rainbowedit.Operator"/> to consider for the comparison.</param>
            <param name="right">The second <see cref="T:rainbowedit.Operator"/> to consider for the comparison.</param>
            <returns>A <see cref="T:System.Boolean"/> value as described.</returns>
            <remarks>
            <see cref="T:rainbowedit.Defenders"/> are always considered lesser than <see cref="T:rainbowedit.Attackers"/> for this comparison.
            </remarks>
        </member>
        <member name="M:rainbowedit.Operator.op_GreaterThanOrEqual(rainbowedit.Operator,rainbowedit.Operator)">
            /// <summary>
            Gets a value that indicates whether the left operand appears in the same position as or after the right operand in the in-game order of <see cref="T:rainbowedit.Operator"/> objects.
            </summary>
            <param name="left">The first <see cref="T:rainbowedit.Operator"/> to consider for the comparison.</param>
            <param name="right">The second <see cref="T:rainbowedit.Operator"/> to consider for the comparison.</param>
            <returns>A <see cref="T:System.Boolean"/> value as described.</returns>
            <remarks>
            <see cref="T:rainbowedit.Defenders"/> are always considered lesser than <see cref="T:rainbowedit.Attackers"/> for this comparison.
            </remarks>
        </member>
        <member name="M:rainbowedit.Operator.CompareTo(rainbowedit.Operator)">
            <inheritdoc/>
        </member>
        <member name="T:rainbowedit.OperatorComparer">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IComparer`1"/> and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <see cref="T:rainbowedit.Operator"/> objects that may be used to sort a collection of <see cref="T:rainbowedit.Operator"/> objects by the order they appear in-game.
            </summary>
        </member>
        <member name="P:rainbowedit.OperatorComparer.Instance">
            <summary>
            Gets an instance of the <see cref="T:rainbowedit.OperatorComparer"/> class.
            </summary>
        </member>
        <member name="T:rainbowedit.Attacker">
            <summary>
            Represents a single Attacker in Siege.
            </summary>
        </member>
        <member name="M:rainbowedit.Attacker.#ctor(System.String,System.Collections.Immutable.ImmutableArray{rainbowedit.Weapon},System.Collections.Immutable.ImmutableArray{rainbowedit.Weapon},rainbowedit.Weapon.Gadget,System.String,System.Collections.Immutable.ImmutableArray{rainbowedit.Models.Specialty},System.String,System.String,System.Decimal,System.Decimal,System.String,rainbowedit.OperatorAge,System.Int32)">
            <summary>
            Initializes a new <see cref="T:rainbowedit.Attacker"/> object.
            </summary>
            <param name="nickname">The nickname of the <see cref="T:rainbowedit.Attacker"/>.</param>
            <param name="primaries">A collection of <see cref="T:rainbowedit.Weapon"/> objects, containing information about the primary weapons the <see cref="T:rainbowedit.Attacker"/> may use.</param>
            <param name="secondaries">A collection of <see cref="T:rainbowedit.Weapon"/> objects, containing information about the secondary weapons the <see cref="T:rainbowedit.Attacker"/> may use.</param>
            <param name="gadgets">A combination of <see cref="T:rainbowedit.Weapon.Gadget"/> values that specifies which gadgets the <see cref="T:rainbowedit.Attacker"/> may choose from.</param>
            <param name="specialAbility">The name of the <see cref="T:rainbowedit.Attacker"/>'s special ability.</param>
            <param name="specialties">A collection of <see cref="T:rainbowedit.Models.Specialty"/> objects representing the <see cref="T:rainbowedit.Attacker"/>'s assigned specialties.</param>
            <param name="organization">The name of the organization the <see cref="T:rainbowedit.Attacker"/> belongs to.</param>
            <param name="birthplace">The <see cref="T:rainbowedit.Attacker"/>'s birthplace.</param>
            <param name="height">The <see cref="T:rainbowedit.Attacker"/>'s height in whole and fractional centimeters.</param>
            <param name="weight">The <see cref="T:rainbowedit.Attacker"/>'s weight in whole and fractional kilograms.</param>
            <param name="realName">The in-game real name of the <see cref="T:rainbowedit.Attacker"/>.</param>
            <param name="age">An <see cref="T:rainbowedit.OperatorAge"/> instance specifying the <see cref="T:rainbowedit.Attacker"/>'s day and month of birth and their age.</param>
            <param name="speed">The <see cref="T:rainbowedit.Attacker"/>'s speed rating.</param>
        </member>
        <member name="T:rainbowedit.Defender">
            <summary>
            Represents a single Defender in Siege.
            </summary>
        </member>
        <member name="M:rainbowedit.Defender.#ctor(System.String,System.Collections.Immutable.ImmutableArray{rainbowedit.Weapon},System.Collections.Immutable.ImmutableArray{rainbowedit.Weapon},rainbowedit.Weapon.Gadget,System.String,System.Collections.Immutable.ImmutableArray{rainbowedit.Models.Specialty},System.String,System.String,System.Decimal,System.Decimal,System.String,rainbowedit.OperatorAge,System.Int32)">
            <summary>
            Initializes a new <see cref="T:rainbowedit.Defender"/> object.
            </summary>
            <param name="nickname">The nickname of the <see cref="T:rainbowedit.Defender"/>.</param>
            <param name="primaries">A collection of <see cref="T:rainbowedit.Weapon"/> objects, containing information about the primary weapons the <see cref="T:rainbowedit.Defender"/> may use.</param>
            <param name="secondaries">A collection of <see cref="T:rainbowedit.Weapon"/> objects, containing information about the secondary weapons the <see cref="T:rainbowedit.Defender"/> may use.</param>
            <param name="gadgets">A combination of <see cref="T:rainbowedit.Weapon.Gadget"/> values that specifies which gadgets the <see cref="T:rainbowedit.Defender"/> may choose from.</param>
            <param name="specialAbility">The name of the <see cref="T:rainbowedit.Defender"/>'s special ability.</param>
            <param name="specialties">A collection of <see cref="T:rainbowedit.Models.Specialty"/> objects representing the <see cref="T:rainbowedit.Defender"/>'s assigned specialties.</param>
            <param name="organization">The name of the organization the <see cref="T:rainbowedit.Defender"/> belongs to.</param>
            <param name="birthplace">The <see cref="T:rainbowedit.Defender"/>'s birthplace.</param>
            <param name="height">The <see cref="T:rainbowedit.Defender"/>'s height in whole and fractional centimeters.</param>
            <param name="weight">The <see cref="T:rainbowedit.Defender"/>'s weight in whole and fractional kilograms.</param>
            <param name="realName">The in-game real name of the <see cref="T:rainbowedit.Defender"/>.</param>
            <param name="age">An <see cref="T:rainbowedit.OperatorAge"/> instance specifying the <see cref="T:rainbowedit.Defender"/>'s day and month of birth and their age.</param>
            <param name="speed">The <see cref="T:rainbowedit.Defender"/>'s speed rating.</param>
        </member>
        <member name="T:rainbowedit.OperatorAge">
            <summary>
            Represents the age of an <see cref="T:rainbowedit.Operator"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.OperatorAge.Day">
            <summary>
            The day of birth of the <see cref="T:rainbowedit.Operator"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.OperatorAge.Month">
            <summary>
            The month of birth of the <see cref="T:rainbowedit.Operator"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.OperatorAge.Age">
            <summary>
            The age of the <see cref="T:rainbowedit.Operator"/>.
            </summary>
        </member>
        <member name="M:rainbowedit.OperatorAge.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an <see cref="T:rainbowedit.OperatorAge"/> instance for the given data.
            </summary>
            <param name="day">The day of birth of the <see cref="T:rainbowedit.Operator"/>.</param>
            <param name="month">The month of birth of the <see cref="T:rainbowedit.Operator"/>.</param>
            <param name="age">The age of the <see cref="T:rainbowedit.Operator"/>.</param>
        </member>
        <member name="M:rainbowedit.OperatorAge.ToDateTime">
            <summary>
            Constructs a <see cref="T:System.DateTime"/> instance representing the (current) date of birth of the <see cref="T:rainbowedit.Operator"/>.
            "Current" because an <see cref="T:rainbowedit.Operator"/>'s age is defined as their birth day and month and their age. <see cref="T:rainbowedit.Operator"/>s do not age; as such, this method returns a different <see cref="T:System.DateTime"/> instance every year.
            </summary>
        </member>
        <member name="M:rainbowedit.OperatorAge.op_Explicit(rainbowedit.OperatorAge)~System.DateTime">
            <summary>
            Converts an <see cref="T:rainbowedit.OperatorAge"/> instance to a <see cref="T:System.DateTime"/> instance.
            </summary>
            <param name="age"></param>
        </member>
        <member name="P:rainbowedit.OperatorAge.Redacted">
            <summary>
            Represents an <see cref="T:rainbowedit.Operator"/>'s age when it is "redacted" or unavailable in-game for any other reason.
            </summary>
        </member>
        <member name="T:rainbowedit.LoadoutConfiguration">
            <summary>
            A single loadout configuration from all possible <see cref="P:rainbowedit.Operator.Primaries"/>, <see cref="P:rainbowedit.Operator.Secondaries"/> (and those two's respective <see cref="P:rainbowedit.Weapon.Barrels"/>, <see cref="P:rainbowedit.Weapon.Grips"/>, <see cref="P:rainbowedit.Weapon.Sights"/> and <see cref="P:rainbowedit.Weapon.Underbarrel"/> options) and <see cref="T:rainbowedit.Weapon.Gadget"/> combinations.
            </summary>
        </member>
        <member name="P:rainbowedit.LoadoutConfiguration.Source">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> this configuration applies to.
            </summary>
        </member>
        <member name="P:rainbowedit.LoadoutConfiguration.Primary">
            <summary>
            A <see cref="T:rainbowedit.WeaponConfiguration"/> detailing the primary <see cref="T:rainbowedit.Weapon"/> and the attachments to use.
            </summary>
        </member>
        <member name="P:rainbowedit.LoadoutConfiguration.Secondary">
            <summary>
            A <see cref="T:rainbowedit.WeaponConfiguration"/> detailing the secondary <see cref="T:rainbowedit.Weapon"/> and the attachments to use.
            </summary>
        </member>
        <member name="P:rainbowedit.LoadoutConfiguration.Gadget">
            <summary>
            A <see cref="T:rainbowedit.Weapon.Gadget"/> enum value identifying the <see cref="T:rainbowedit.Weapon.Gadget"/> to use.
            </summary>
        </member>
        <member name="M:rainbowedit.LoadoutConfiguration.#ctor(rainbowedit.Operator)">
            <summary>
            Initializes a new <see cref="T:rainbowedit.LoadoutConfiguration"/> object from just an <see cref="T:rainbowedit.Operator"/> to gather values from.
            </summary>
            <param name="source">The <see cref="T:rainbowedit.Defender"/> to gather random values for this <see cref="T:rainbowedit.LoadoutConfiguration"/> instance's properties from.</param>
        </member>
        <member name="M:rainbowedit.LoadoutConfiguration.#ctor(rainbowedit.Operator,rainbowedit.Weapon.Gadget,rainbowedit.Weapon,rainbowedit.Weapon)">
            <summary>
            <para>
            Initializes a new <see cref="T:rainbowedit.LoadoutConfiguration"/> object from an <see cref="T:rainbowedit.Operator"/> and one each of their <see cref="P:rainbowedit.Operator.Gadgets"/>, <see cref="P:rainbowedit.Operator.Primaries"/> and <see cref="P:rainbowedit.Operator.Secondaries"/>, the latter two of which are used to instantiate randomized <see cref="T:rainbowedit.WeaponConfiguration"/>s.
            </para>
            <para>
            A <see cref="T:rainbowedit.Exceptions.LoadoutOperatorMismatchException"/> is thrown if the passed <see cref="T:rainbowedit.Weapon"/> objects do not belong to the <paramref name="source"/> <see cref="T:rainbowedit.Operator"/>.
            </para>
            </summary>
            <param name="source">The <see cref="T:rainbowedit.Defender"/> to assign to this <see cref="T:rainbowedit.LoadoutConfiguration"/> instance.</param>
            <param name="gadget">The <see cref="T:rainbowedit.Weapon.Gadget"/> to assign to this <see cref="T:rainbowedit.LoadoutConfiguration"/> instance.</param>
            <param name="primary">One of the <paramref name="source"/> <see cref="T:rainbowedit.Operator"/>'s <see cref="P:rainbowedit.Operator.Primaries"/>.</param>
            <param name="secondary">One of the <paramref name="source"/> <see cref="T:rainbowedit.Operator"/>'s <see cref="P:rainbowedit.Operator.Secondaries"/>.</param>
            <exception cref="T:rainbowedit.Exceptions.LoadoutOperatorMismatchException">Thrown if the passed <paramref name="gadget"/> or any of the <see cref="T:rainbowedit.Weapon"/> objects do not belong to the <paramref name="source"/> <see cref="T:rainbowedit.Operator"/>.</exception>
        </member>
        <member name="M:rainbowedit.LoadoutConfiguration.#ctor(rainbowedit.Operator,rainbowedit.Weapon.Gadget,rainbowedit.WeaponConfiguration,rainbowedit.WeaponConfiguration)">
            <summary>
            <para>
            Initializes a new fully customized <see cref="T:rainbowedit.LoadoutConfiguration"/> object from an <see cref="T:rainbowedit.Operator"/>, one of their <see cref="P:rainbowedit.Operator.Gadgets"/> and one <see cref="T:rainbowedit.WeaponConfiguration"/> identifying the <see cref="P:rainbowedit.LoadoutConfiguration.Primary"/> and <see cref="P:rainbowedit.LoadoutConfiguration.Secondary"/> respectively.
            </para>
            <para>
            A <see cref="T:rainbowedit.Exceptions.LoadoutOperatorMismatchException"/> is thrown if the passed <see cref="T:rainbowedit.WeaponConfiguration"/>'s source <see cref="T:rainbowedit.Weapon"/> objects do not belong to the <paramref name="source"/> <see cref="T:rainbowedit.Operator"/>.
            </para>
            </summary>
            <param name="source">The <see cref="T:rainbowedit.Defender"/> to assign to this <see cref="T:rainbowedit.LoadoutConfiguration"/> instance.</param>
            <param name="gadget">The <see cref="T:rainbowedit.Weapon.Gadget"/> to assign to this <see cref="T:rainbowedit.LoadoutConfiguration"/> instance.</param>
            <param name="primaryConfig">A <see cref="T:rainbowedit.WeaponConfiguration"/> instance constructed from one of the <paramref name="source"/> <see cref="T:rainbowedit.Operator"/>'s <see cref="P:rainbowedit.Operator.Primaries"/>.</param>
            <param name="secondaryConfig">A <see cref="T:rainbowedit.WeaponConfiguration"/> instance constructed from one of the <paramref name="source"/> <see cref="T:rainbowedit.Operator"/>'s <see cref="P:rainbowedit.Operator.Secondaries"/>.</param>
            <exception cref="T:rainbowedit.Exceptions.LoadoutOperatorMismatchException">Thrown if the passed <paramref name="gadget"/> or any of the <see cref="T:rainbowedit.Weapon"/> objects do not belong to the <paramref name="source"/> <see cref="T:rainbowedit.Operator"/>.</exception>
        </member>
        <member name="M:rainbowedit.LoadoutConfiguration.ToShortString">
            <summary>
            Constructs a short string identifying the components of this <see cref="T:rainbowedit.LoadoutConfiguration"/>.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.LoadoutConfiguration.ToString">
            <summary>
            Constructs a <see cref="T:System.String"/> that identifies the components of this <see cref="T:rainbowedit.LoadoutConfiguration"/>. This includes the nickname of a <see cref="P:rainbowedit.LoadoutConfiguration.Source"/> <see cref="T:rainbowedit.Operator"/>, a <see cref="P:rainbowedit.LoadoutConfiguration.Primary"/> and <see cref="P:rainbowedit.LoadoutConfiguration.Secondary"/> weapon's type and name and a <see cref="P:rainbowedit.LoadoutConfiguration.Gadget"/> name.
            </summary>
            <returns>The string as described.</returns>
        </member>
        <member name="M:rainbowedit.LoadoutConfiguration.op_Implicit(rainbowedit.LoadoutConfiguration)~System.String">
            <summary>
            Implicitly converts a <see cref="T:rainbowedit.LoadoutConfiguration"/> to a <see cref="T:System.String"/> identifying the components of this <see cref="T:rainbowedit.LoadoutConfiguration"/>.
            </summary>
            <param name="config">The <see cref="T:rainbowedit.LoadoutConfiguration"/> to convert.</param>
        </member>
        <member name="M:rainbowedit.LoadoutConfiguration.LongString">
            <summary>
            Constructs a long string identifying the components of this <see cref="T:rainbowedit.LoadoutConfiguration"/> in detail. This includes basically the same information as the string returned by <see cref="M:rainbowedit.LoadoutConfiguration.ToString"/>, spanning over multiple lines.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="T:rainbowedit.WeaponConfiguration">
            <summary>
            A single weapon configuration from all possible <see cref="P:rainbowedit.Weapon.Barrels"/>, <see cref="P:rainbowedit.Weapon.Grips"/>, <see cref="P:rainbowedit.Weapon.Sights"/> and <see cref="P:rainbowedit.Weapon.Underbarrel"/> combinations.
            </summary>
        </member>
        <member name="P:rainbowedit.WeaponConfiguration.Source">
            <summary>
             The <see cref="T:rainbowedit.Weapon"/> this configuration applies to.
            </summary>
        </member>
        <member name="P:rainbowedit.WeaponConfiguration.Sight">
            <summary>
            A string detailing the sight to use.
            </summary>
        </member>
        <member name="P:rainbowedit.WeaponConfiguration.Barrel">
            <summary>
            A string detailing the barrel attachment to use.
            </summary>
        </member>
        <member name="P:rainbowedit.WeaponConfiguration.Grip">
            <summary>
            A string detailing the grip to use.
            </summary>
        </member>
        <member name="P:rainbowedit.WeaponConfiguration.Underbarrel">
            <summary>
            Whether to use an underbarrel laser.
            </summary>
        </member>
        <member name="M:rainbowedit.WeaponConfiguration.#ctor(rainbowedit.Weapon)">
            <summary>
            Initializes a new <see cref="T:rainbowedit.WeaponConfiguration"/> object from just a <see cref="T:rainbowedit.Weapon"/> to gather values from.
            </summary>
            <param name="source">The <see cref="T:rainbowedit.Weapon"/> to gather random values for this <see cref="T:rainbowedit.WeaponConfiguration"/> instance's properties from.</param>
        </member>
        <member name="M:rainbowedit.WeaponConfiguration.#ctor(rainbowedit.Weapon,rainbowedit.Weapon.Sight,rainbowedit.Weapon.Barrel,rainbowedit.Weapon.Grip,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:rainbowedit.WeaponConfiguration"/> object from and one each of their <see cref="T:rainbowedit.Weapon.Sight"/>s, <see cref="T:rainbowedit.Weapon.Barrel"/>s and <see cref="T:rainbowedit.Weapon.Grip"/>s and a value indicating whether to use a <see cref="P:rainbowedit.Weapon.Underbarrel"/> laser.
            </summary>
            <param name="source">The <see cref="T:rainbowedit.Weapon"/> to gather random values for this <see cref="T:rainbowedit.WeaponConfiguration"/> instance's properties from.</param>
            <param name="sight">A <see cref="T:rainbowedit.Weapon.Sight"/> enum value detailing the sight to use. If this is <see cref="F:rainbowedit.Weapon.Sight.NonMagnifying"/> or <see cref="F:rainbowedit.Weapon.Sight.Magnifying"/>, a random one of its variants is chosen.</param>
            <param name="barrel">A <see cref="T:rainbowedit.Weapon.Barrel"/> enum value detailing the barrel attachment to use.</param>
            <param name="grip">A <see cref="T:rainbowedit.Weapon.Grip"/> enum value detailing the grip to use.</param>
            <param name="underbarrel">Whether to use an underbarrel laser.</param>
        </member>
        <member name="M:rainbowedit.WeaponConfiguration.#ctor(rainbowedit.Weapon,System.String,System.String,System.String,System.Boolean)">
            <summary>
            <para>
            Initializes a new fully customized <see cref="T:rainbowedit.WeaponConfiguration"/> object from a <see cref="T:rainbowedit.Weapon"/> and string representations of one each of their <see cref="T:rainbowedit.Weapon.Sight"/>s, <see cref="T:rainbowedit.Weapon.Barrel"/>s and <see cref="T:rainbowedit.Weapon.Grip"/>s and a value indicating whether to use a <see cref="P:rainbowedit.Weapon.Underbarrel"/> laser.
            </para>
            <para>
            An <see cref="T:rainbowedit.Exceptions.EnumStringificationException`1"/> is thrown if one of the strings passed does not match any possible string representations for that enum.
            </para>
            </summary>
            <param name="source">The <see cref="T:rainbowedit.Weapon"/> to assign to this <see cref="T:rainbowedit.WeaponConfiguration"/> instance.</param>
            <param name="sight">A string detailing the sight to use. This must match one of the string representations returned by <see cref="M:rainbowedit.Extensions.EnumExtensions.GetDescription(System.Enum)" /> OR one of the sub-sight names for <see cref="F:rainbowedit.Weapon.Sight.NonMagnifying"/> or <see cref="F:rainbowedit.Weapon.Sight.Magnifying"/>.</param>
            <param name="barrel">A string detailing the barrel attachment to use. This must match one of the string representations returned by <see cref="M:rainbowedit.Extensions.EnumExtensions.GetDescription(System.Enum)" />.</param>
            <param name="grip">A string detailing the grip to use. This must match one of the string representations returned by <see cref="M:rainbowedit.Extensions.EnumExtensions.GetDescription(System.Enum)" />.</param>
            <param name="underbarrel">Whether to use an underbarrel laser.</param>
            <exception cref="T:rainbowedit.Exceptions.EnumStringificationException`1">Thrown if one of the strings passed does not match any possible string representations for that enum.</exception>
        </member>
        <member name="M:rainbowedit.WeaponConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="T:rainbowedit.Models.SpecialtyCollection">
            <summary>
            Serves as the base class for a collection of <see cref="T:rainbowedit.Models.Specialty"/> instances.
            </summary>
        </member>
        <member name="T:rainbowedit.Models.DefenderSpecialties">
            <summary>
            Implements a collection of <see cref="T:rainbowedit.Models.Specialty"/> instances that apply to the <see cref="T:rainbowedit.Defender"/>s.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.DefenderSpecialties.Trapper">
            <summary>
            The <see cref="T:rainbowedit.Defenders"/>' <see cref="P:rainbowedit.Models.DefenderSpecialties.Trapper"/> <see cref="T:rainbowedit.Models.Specialty"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.DefenderSpecialties.Support">
            <summary>
            The <see cref="T:rainbowedit.Defenders"/>' <see cref="P:rainbowedit.Models.DefenderSpecialties.Support"/> <see cref="T:rainbowedit.Models.Specialty"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.DefenderSpecialties.AntiEntry">
            <summary>
            The <see cref="T:rainbowedit.Defenders"/>' <see cref="P:rainbowedit.Models.DefenderSpecialties.AntiEntry"/> <see cref="T:rainbowedit.Models.Specialty"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.DefenderSpecialties.Intel">
            <summary>
            The <see cref="T:rainbowedit.Defenders"/>' <see cref="P:rainbowedit.Models.DefenderSpecialties.Intel"/> <see cref="T:rainbowedit.Models.Specialty"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.DefenderSpecialties.AntiGadget">
            <summary>
            The <see cref="T:rainbowedit.Defenders"/>' <see cref="P:rainbowedit.Models.DefenderSpecialties.AntiGadget"/> <see cref="T:rainbowedit.Models.Specialty"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.DefenderSpecialties.CrowdControl">
            <summary>
            The <see cref="T:rainbowedit.Defenders"/>' <see cref="P:rainbowedit.Models.DefenderSpecialties.CrowdControl"/> <see cref="T:rainbowedit.Models.Specialty"/>.
            </summary>
        </member>
        <member name="T:rainbowedit.Models.AttackerSpecialties">
            <summary>
            Implements a collection of <see cref="T:rainbowedit.Models.Specialty"/> instances that apply to the <see cref="T:rainbowedit.Attacker"/>s.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.AttackerSpecialties.Breach">
            <summary>
            The <see cref="T:rainbowedit.Attackers"/>' <see cref="P:rainbowedit.Models.AttackerSpecialties.Breach"/> <see cref="T:rainbowedit.Models.Specialty"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.AttackerSpecialties.Support">
            <summary>
            The <see cref="T:rainbowedit.Attackers"/>' <see cref="P:rainbowedit.Models.AttackerSpecialties.Support"/> <see cref="T:rainbowedit.Models.Specialty"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.AttackerSpecialties.FrontLine">
            <summary>
            The <see cref="T:rainbowedit.Attackers"/>' <see cref="P:rainbowedit.Models.AttackerSpecialties.FrontLine"/> <see cref="T:rainbowedit.Models.Specialty"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.AttackerSpecialties.Intel">
            <summary>
            The <see cref="T:rainbowedit.Attackers"/>' <see cref="P:rainbowedit.Models.AttackerSpecialties.Intel"/> <see cref="T:rainbowedit.Models.Specialty"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.AttackerSpecialties.AntiGadget">
            <summary>
            The <see cref="T:rainbowedit.Attackers"/>' <see cref="P:rainbowedit.Models.AttackerSpecialties.AntiGadget"/> <see cref="T:rainbowedit.Models.Specialty"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.AttackerSpecialties.MapControl">
            <summary>
            The <see cref="T:rainbowedit.Attackers"/>' <see cref="P:rainbowedit.Models.AttackerSpecialties.MapControl"/> <see cref="T:rainbowedit.Models.Specialty"/>.
            </summary>
        </member>
        <member name="T:rainbowedit.Models.Specialty">
            <summary>
            Represents a <see cref="T:rainbowedit.Models.Specialty"/>, introduced in Y8S1.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.Specialty.Name">
            <summary>
            The name of this <see cref="T:rainbowedit.Models.Specialty"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.Specialty.Reward">
            <summary>
            The <see cref="T:rainbowedit.Defender"/> reward for completing all three of this <see cref="T:rainbowedit.Models.Specialty"/>'s <see cref="P:rainbowedit.Models.Specialty.Challenges"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.Specialty.Challenges">
            <summary>
            A list of <see cref="T:rainbowedit.Models.Specialty.Challenge"/>s to be completed to unlock rewards and finally the <see cref="P:rainbowedit.Models.Specialty.Reward"/> <see cref="T:rainbowedit.Operator"/>.
            </summary>
        </member>
        <member name="M:rainbowedit.Models.Specialty.#ctor(System.String,rainbowedit.Operator,System.Collections.Generic.List{rainbowedit.Models.Specialty.Challenge})">
            <summary>
            Initializes a new <see cref="T:rainbowedit.Models.Specialty"/> with a specified name, <see cref="T:rainbowedit.Operator"/> reward, and list of <see cref="P:rainbowedit.Models.Specialty.Challenges"/>.
            </summary>
            <param name="name">The name of the <see cref="T:rainbowedit.Models.Specialty"/>.</param>
            <param name="reward">The <see cref="T:rainbowedit.Defender"/> reward for completing all three of this <see cref="T:rainbowedit.Models.Specialty"/>'s <paramref name="challenges"/>.</param>
            <param name="challenges">The list of challenges for this <see cref="T:rainbowedit.Models.Specialty"/>.</param>
        </member>
        <member name="M:rainbowedit.Models.Specialty.GetOperators">
            <summary>
            Compiles a collection of all <see cref="T:rainbowedit.Operator"/>s that have this <see cref="T:rainbowedit.Models.Specialty"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:rainbowedit.Operator"/> that have this <see cref="T:rainbowedit.Models.Specialty"/>.</returns>
        </member>
        <member name="T:rainbowedit.Models.Specialty.Challenge">
            <summary>
            Represents one of the three challenges of a <see cref="T:rainbowedit.Models.Specialty"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.Specialty.Challenge.Description">
            <summary>
            The description of the <see cref="T:rainbowedit.Models.Specialty.Challenge" />.
            </summary>
        </member>
        <member name="P:rainbowedit.Models.Specialty.Challenge.Reward">
            <summary>
            The reward for completing the <see cref="T:rainbowedit.Models.Specialty.Challenge" />.
            </summary>
        </member>
        <member name="M:rainbowedit.Models.Specialty.Challenge.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:rainbowedit.Models.Specialty.Challenge" /> with the specified name, description, and reward.
            </summary>
            <param name="description">The description of the challenge.</param>
            <param name="reward">The reward for completing the challenge.</param>
        </member>
        <member name="T:rainbowedit.Weapon">
            <summary>
            An <see cref="T:rainbowedit.Operator"/>-specific <see cref="T:rainbowedit.Weapon"/> in Siege.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Source">
            <summary>
             The <see cref="T:rainbowedit.Defender"/> this <see cref="T:rainbowedit.Weapon"/> belongs to.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Name">
            <summary>
            The in-game name of the <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Type">
            <summary>
            The in-game <see cref="T:rainbowedit.Weapon.WeaponType"/> of the <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.FireMode">
            <summary>
            The in-game <see cref="T:rainbowedit.Weapon.FiringMode"/> the <see cref="T:rainbowedit.Weapon"/> uses.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Damage">
            <summary>
            The damage this <see cref="T:rainbowedit.Weapon"/> deals when <i>not</i> equipped with a <see cref="F:rainbowedit.Weapon.Barrel.ExtendedBarrel"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.RoundsPerMinute">
            <summary>
            The rounds per minute this <see cref="T:rainbowedit.Weapon"/> is capable of firing in-game.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Capacity">
            <summary>
            The in-game magazine capacity of this <see cref="T:rainbowedit.Weapon"/>.
            </summary>
            <remarks>
            This does not include the single round chambered after cocking the <see cref="T:rainbowedit.Weapon"/>.
            </remarks>
        </member>
        <member name="P:rainbowedit.Weapon.Sights">
            <summary>
            A combination of <see cref="T:rainbowedit.Weapon.Sight"/> values that specifies which sights may be equipped on this <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Barrels">
            <summary>
            A combination of <see cref="T:rainbowedit.Weapon.Barrel"/> values that specifies which barrel extensions may be equipped on this <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Grips">
            <summary>
            A combination of <see cref="T:rainbowedit.Weapon.Grip"/> values that specifies which grips may be equipped on this <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Underbarrel">
            <summary>
            Whether an underbarrel laser may be equipped on this <see cref="T:rainbowedit.Weapon"/>.
            </summary>
            <remarks>
            Usage of an underbarrel laser grants a 10% ADS speed bonus.
            </remarks>
        </member>
        <member name="P:rainbowedit.Weapon.SuppressedDamage">
            <summary>
            The damage this <see cref="T:rainbowedit.Weapon"/> deals when equipped with a <see cref="F:rainbowedit.Weapon.Barrel.Suppressor"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.ExtendedBarrelDamage">
            <summary>
            The damage this <see cref="T:rainbowedit.Weapon"/> deals when equipped with a <see cref="F:rainbowedit.Weapon.Barrel.ExtendedBarrel"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.DamagePerSecond">
            <summary>
            The theoretical damage per second output of this <see cref="T:rainbowedit.Weapon"/> during sustained fire, including ideal (tactical) reloads.
            This is only technically relevant and not really meaningful in-game. Furthermore, it's entirely non-sensical for the <c>GONNE-6</c> or shields, for example.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.ReloadTactical">
            <summary>
            A <see cref="T:System.TimeSpan"/> instance that represents the amount of time it takes to perform a tactical reload with this <see cref="T:rainbowedit.Weapon"/> (a reload when there is a round chambered). For weapons that cannot be in this state (such as revolvers), this is generally equal to <see cref="P:rainbowedit.Weapon.ReloadEmpty"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.ReloadEmpty">
            <summary>
            A <see cref="T:System.TimeSpan"/> instance that represents the amount of time it takes to perform an empty reload with this <see cref="T:rainbowedit.Weapon"/> (a reload when there is no round chambered).
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.IsSecondary">
            <summary>
            Whether this <see cref="T:rainbowedit.Weapon"/> is a secondary weapon.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.AdsSpeed">
            <summary>
            The time it takes to transition from or to aiming down sights (ADS) with this <see cref="T:rainbowedit.Weapon"/>.
            Note that this is only the base value and does not apply modifiers such as sight ADS speed multipliers.
            </summary>
        </member>
        <member name="T:rainbowedit.Weapon.Collections">
            <summary>
            Contains properties that return specific collections of <see cref="T:rainbowedit.Weapon"/>s.
            Note that, at runtime, these evaluate correctly and return an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:rainbowedit.Weapon"/>. The inherent issue with how the <see cref="T:rainbowedit.Operator"/> and, consequently, their <see cref="T:rainbowedit.Weapon"/>s are instantiated are that the order in which static fields and properties are initialized is undefined. At compile-time, all the <see cref="T:rainbowedit.Operator"/> and <see cref="T:rainbowedit.Weapon"/> fields/properties are <see langword="null"/>, which makes them unusable for creating pre-defined collections of them. As such, these properties are evaluated lazily through <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Collections.DefenderPrimary">
            <summary>
            Returns all unique <see cref="T:rainbowedit.Defenders"/>' primary <see cref="T:rainbowedit.Weapon"/>s (see <see cref="P:rainbowedit.Operator.Primaries"/>).
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Collections.DefenderSecondary">
            <summary>
            Returns all unique <see cref="T:rainbowedit.Defenders"/>' secondary <see cref="T:rainbowedit.Weapon"/>s (see <see cref="P:rainbowedit.Operator.Secondaries"/>).
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Collections.DefenderAll">
            <summary>
            Returns all unique <see cref="T:rainbowedit.Defenders"/>' <see cref="T:rainbowedit.Weapon"/>s (see <see cref="P:rainbowedit.Operator.Primaries"/> and <see cref="P:rainbowedit.Operator.Secondaries"/>).
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Collections.AttackerPrimary">
            <summary>
            Returns all unique <see cref="T:rainbowedit.Attackers"/>' primary <see cref="T:rainbowedit.Weapon"/>s (see <see cref="P:rainbowedit.Operator.Primaries"/>).
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Collections.AttackerSecondary">
            <summary>
            Returns all unique <see cref="T:rainbowedit.Attackers"/>' secondary <see cref="T:rainbowedit.Weapon"/>s (see <see cref="P:rainbowedit.Operator.Secondaries"/>).
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Collections.AttackerAll">
            <summary>
            Returns all unique <see cref="T:rainbowedit.Attackers"/>' <see cref="T:rainbowedit.Weapon"/>s (see <see cref="P:rainbowedit.Operator.Primaries"/> and <see cref="P:rainbowedit.Operator.Secondaries"/>).
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Collections.AllPrimary">
            <summary>
            Returns all unique <see cref="T:rainbowedit.Defenders"/>' and <see cref="T:rainbowedit.Attackers"/>' primary <see cref="T:rainbowedit.Weapon"/>s (see <see cref="P:rainbowedit.Operator.Primaries"/>), concatenated in that order.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Collections.AllSecondary">
            <summary>
            Returns all unique <see cref="T:rainbowedit.Defenders"/>' and <see cref="T:rainbowedit.Attackers"/>' secondary <see cref="T:rainbowedit.Weapon"/>s (see <see cref="P:rainbowedit.Operator.Secondaries"/>), concatenated in that order.
            </summary>
        </member>
        <member name="P:rainbowedit.Weapon.Collections.All">
            <summary>
            Returns all unique <see cref="T:rainbowedit.Defenders"/>' and <see cref="T:rainbowedit.Attackers"/>' <see cref="T:rainbowedit.Weapon"/>s (see <see cref="P:rainbowedit.Operator.Primaries"/> and <see cref="P:rainbowedit.Operator.Secondaries"/>), concatenated in that order.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.SuppressedDamageMultiplier">
            <summary>
            The multiplier that is applied to a weapon's base damage when equipping a <see cref="F:rainbowedit.Weapon.Barrel.Suppressor"/> on it. This is not defined anywhere and resulted from averaging the ratios from all weapons a <see cref="F:rainbowedit.Weapon.Barrel.Suppressor"/> can be equipped on (<c>suppressed_dmg / dmg</c>). Typically, using <c>0.84</c> yields a close enough approximate. The calculated value is then rounded towards the nearest integer.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.ExtendedBarrelDamageMultiplier">
            <summary>
            <para>The multiplier that is applied to a weapon's base damage when equipping an <see cref="F:rainbowedit.Weapon.Barrel.ExtendedBarrel"/> on it. Defined as 15% on top of the <see cref="T:rainbowedit.Weapon"/>'s base damage as part of the Y7S2 Designer's notes (https://store.steampowered.com/news/app/359550/view/5254045511872530857).</para>
            <para>As of Y8S1.2, this has been changed to 12% on top of a <see cref="T:rainbowedit.Weapon"/>'s base damage.</para>
            </summary>
        </member>
        <member name="T:rainbowedit.Weapon.WeaponType">
            <summary>
            Identifies the type of a <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.WeaponType.Invalid">
            <summary>
            Generally unused. Indicates an invalid value in terms of a <see cref="T:rainbowedit.WeaponConfiguration"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.WeaponType.AssaultRifle">
            <summary>
            Identifies the Assault Rifle weapon type.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.WeaponType.Handgun">
            <summary>
            Identifies the Handgun weapon type.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.WeaponType.LightMachineGun">
            <summary>
            Identifies the Light Machine Gun weapon type.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.WeaponType.MachinePistol">
            <summary>
            Identifies the Machine Pistol weapon type.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.WeaponType.MarksmanRifle">
            <summary>
            Identifies the Marksman Rifle weapon type.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.WeaponType.Shield">
            <summary>
            Identifies the Shield weapon type.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.WeaponType.ShotgunSlug">
            <summary>
            Identifies the Shotgun weapon type (for shotguns that fire slugs).
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.WeaponType.ShotgunShot">
            <summary>
            Identifies the Shotgun weapon type (for shotguns that fire shot).
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.WeaponType.Shotgun">
            <summary>
            Identifies the Shotgun weapon type (shorthand for an "any shotgun" filter).
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.WeaponType.SubmachineGun">
            <summary>
            Identifies the Submachine Gun weapon type.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.WeaponType.HandCannon">
            <summary>
            Identifies the Hand Cannon weapon type.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.WeaponType.Revolver">
            <summary>
            Identifies the Revolver weapon type.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.WeaponType.SniperRifle">
            <summary>
            Identifies the Sniper Rifle weapon type.
            </summary>
        </member>
        <member name="T:rainbowedit.Weapon.FiringMode">
            <summary>
            Indicates which firing mode a <see cref="T:rainbowedit.Weapon"/> uses.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.FiringMode.Invalid">
            <summary>
            Generally unused. Indicates that a <see cref="T:rainbowedit.Weapon"/> has no defined firing mode.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.FiringMode.FullAuto">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Weapon"/> is fully automatic.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.FiringMode.SingleShot">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Weapon"/> is semi-automatic (requiring another trigger pull / click for each shot).
            </summary>
        </member>
        <member name="T:rainbowedit.Weapon.Sight">
            <summary>
            Indicates which sights can be or are forcefully equipped on a <see cref="T:rainbowedit.Weapon"/>.
            <para/>As of Y7S1, all weapons (excepting most secondaries and, for example, Glaz's "OTs-03" DMR, which does not have access to Reflex C) have access to all non-magnifying (1x) scopes (Red Dot, Holo, Reflex), or more precisely, all of their variants (no matter if standard, Russian, alternate etc.). Because of this, I've decided to combine them. Checking for magnifying scopes still works as before.
            <para/>However, as mentioned above, exceptions such as Glaz's "OTs-03" DMR, which cannot be equipped with Reflex C, are not (yet?) handled differently.
            <para/>Additionally, since there are two 2.5x scope variants, the two options for  that magnification level have also been combined.
            <para/>As of Y7S3, all weapons that have access to scopes of a specific magnification level now automatically have access to all magnifications levels up to that level (excepting Kali's "CSRX 300"). Because of this, the <see cref="P:rainbowedit.Weapon.Sights"/> flags have been redefined to act as maximums. Use <see cref="M:System.Enum.HasFlag(System.Enum)"/> for any look-ups.
            <para/>Y9S1 introduces massive changes to the entire <see cref="T:rainbowedit.Weapon"/> ecosystem, including the overall functionalities of sights, barrels, grips and underbarrel attachments. As such, the <see cref="P:rainbowedit.Weapon.Sights"/> enum has been redefined to reflect these changes. <see langword="Invalid"/> has been renamed to <see cref="F:rainbowedit.Weapon.Sight.IronSight"/> and all options (excepting <see cref="F:rainbowedit.Weapon.Sight.VariableSniper"/> now also contain <see cref="F:rainbowedit.Weapon.Sight.IronSight"/>.
            </summary>
            <remarks>
            <para/><see cref="T:rainbowedit.Weapon.Sight"/> is semi-<see cref="T:System.FlagsAttribute"/>. and <see cref="!:Other"/> may be removed using bitwise NOT and AND, the other values stack (see the annotation about the flags representing maximums, not distinct values).
            </remarks>
        </member>
        <member name="F:rainbowedit.Weapon.Sight.Invalid">
            <summary>
            Generally unused. Indicates an invalid value in terms of a <see cref="T:rainbowedit.WeaponConfiguration"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Sight.NoneOther">
            <summary>
            Indicates that no sights can be equipped on a <see cref="T:rainbowedit.Weapon"/> or that there's something else weird going on with it.
            This is true for most <see cref="F:rainbowedit.Weapon.WeaponType.Handgun"/>s.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Sight.IronSight">
            <summary>
            Indicates that a <see cref="T:rainbowedit.Weapon"/>'s Iron Sight can be chosen.
            </summary>
            <remarks>
            Usage of the Iron Sight grants a 10% ADS speed bonus.
            </remarks>
        </member>
        <member name="F:rainbowedit.Weapon.Sight.NonMagnifying">
            <summary>
            Indicates that non-magnifying (1x) sights can be equipped on a <see cref="T:rainbowedit.Weapon"/>.
            </summary>
            <remarks>
            Usage of a non-magnifying sight grants a 5% ADS speed bonus.
            </remarks>
        </member>
        <member name="F:rainbowedit.Weapon.Sight.Magnifying">
            <summary>
            Indicates that the magnifying sights can be equipped on a <see cref="T:rainbowedit.Weapon"/>.
            </summary>
            <remarks>
            Usage of a magnifying sight grants no ADS speed bonus, but also does not incur a penalty.
            </remarks>
        </member>
        <member name="F:rainbowedit.Weapon.Sight.Telescopic">
            <summary>
            Indicates that the telescopic sight can be equipped on a <see cref="T:rainbowedit.Weapon"/>.
            </summary>
            <remarks>
            Usage of a magnifying sight grants no ADS speed bonus, but also does not incur a penalty.
            </remarks>
        </member>
        <member name="F:rainbowedit.Weapon.Sight.FlipSight">
            <summary>
            Indicates that Iron Sights or at most any non-magnifying (1x) sight can be equipped on a <see cref="T:rainbowedit.Weapon"/>, which may then be magnified to 4x by <see cref="P:rainbowedit.Attackers.Glaz"/>'s <i>HDS Flip Sight</i>. Unique to <see cref="P:rainbowedit.Attackers.Glaz"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Sight.VariableSniper">
            <summary>
            Indicates that a variable-zoom 5x/12x sight can be equipped on a <see cref="T:rainbowedit.Weapon"/>. This identifies <see cref="P:rainbowedit.Attackers.Kali"/>'s <i>CSRX 300</i>. Unique to <see cref="P:rainbowedit.Attackers.Kali"/>.
            </summary>
        </member>
        <member name="T:rainbowedit.Weapon.Barrel">
            <summary>
            Indicates which barrel attachments can be or are forcefully equipped on a <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Barrel.None">
            <summary>
            Indicates that no barrel attachments can be equipped on a <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Barrel.Suppressor">
            <summary>
            Indicates that a suppressor can be equipped on a <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Barrel.FlashHider">
            <summary>
            Indicates that a flash hider can be equipped on a <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Barrel.Compensator">
            <summary>
            Indicates that a compensator can be equipped on a <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Barrel.MuzzleBrake">
            <summary>
            Indicates that a muzzle brake can be equipped on a <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Barrel.ExtendedBarrel">
            <summary>
            Indicates that an extended barrel can be equipped on a <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="T:rainbowedit.Weapon.Grip">
            <summary>
            Indicates which grips can be or are forcefully equipped on a <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Grip.HorizontalGrip">
            <summary>
            Indicates that no grips can be equipped on a <see cref="T:rainbowedit.Weapon"/>.
            This is also the <see langword="default"/> for <see cref="F:rainbowedit.Weapon.WeaponType.Handgun"/>s, <see cref="F:rainbowedit.Weapon.WeaponType.Revolver"/>s and the like, for which no grip options are available.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Grip.VerticalGrip">
            <summary>
            Indicates that a vertical grip can be equipped on a <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Grip.AngledGrip">
            <summary>
            Indicates that an angled grip can be equipped on a <see cref="T:rainbowedit.Weapon"/>.
            </summary>
        </member>
        <member name="T:rainbowedit.Weapon.Gadget">
            <summary>
            Indicates which gadgets an <see cref="T:rainbowedit.Operator"/> may choose from.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Gadget.Invalid">
            <summary>
            Generally unused. Indicates an invalid value in terms of a <see cref="T:rainbowedit.WeaponConfiguration"/>.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Gadget.FragGrenade">
            <summary>
            Indicates than an <see cref="T:rainbowedit.Operator"/> may choose fragmentation grenades during loadout selection. This is unique to <see cref="T:rainbowedit.Attackers" />.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Gadget.BreachCharge">
            <summary>
            Indicates than an <see cref="T:rainbowedit.Operator"/> may choose breach charges grenade during loadout selection. This is unique to <see cref="T:rainbowedit.Attackers" />.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Gadget.Claymore">
            <summary>
            Indicates than an <see cref="T:rainbowedit.Operator"/> may choose claymores during loadout selection. This is unique to <see cref="T:rainbowedit.Attackers" />.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Gadget.HardBreachCharge">
            <summary>
            Indicates than an <see cref="T:rainbowedit.Operator"/> may choose hard-breach charges grenade during loadout selection. This is unique to <see cref="T:rainbowedit.Attackers" />.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Gadget.SmokeGrenade">
            <summary>
            Indicates than an <see cref="T:rainbowedit.Operator"/> may choose smoke grenades during loadout selection. This is unique to <see cref="T:rainbowedit.Attackers" />.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Gadget.StunGrenade">
            <summary>
            Indicates than an <see cref="T:rainbowedit.Operator"/> may choose stun grenades during loadout selection. This is unique to <see cref="T:rainbowedit.Attackers" />.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Gadget.EmpGrenade">
            <summary>
            Indicates than an <see cref="T:rainbowedit.Operator"/> may choose EMP grenades during loadout selection. This is unique to <see cref="T:rainbowedit.Attackers" />.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Gadget.BarbedWire">
            <summary>
            Indicates than an <see cref="T:rainbowedit.Operator"/> may choose barbed wire during loadout selection. This is unique to <see cref="T:rainbowedit.Defenders" />.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Gadget.DeployableShield">
            <summary>
            Indicates than an <see cref="T:rainbowedit.Operator"/> may choose a deployable shield during loadout selection. This is unique to <see cref="T:rainbowedit.Defenders" />.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Gadget.NitroCell">
            <summary>
            Indicates than an <see cref="T:rainbowedit.Operator"/> may choose a nitro cell during loadout selection. This is unique to <see cref="T:rainbowedit.Defenders" />.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Gadget.BulletproofCamera">
            <summary>
            Indicates than an <see cref="T:rainbowedit.Operator"/> may choose a bulletproof camera during loadout selection. This is unique to <see cref="T:rainbowedit.Defenders" />.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Gadget.ProximityAlarm">
            <summary>
            Indicates than an <see cref="T:rainbowedit.Operator"/> may choose proximity alarms during loadout selection. This is unique to <see cref="T:rainbowedit.Defenders" />.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Gadget.ImpactGrenade">
            <summary>
            Indicates than an <see cref="T:rainbowedit.Operator"/> may choose impact grenades during loadout selection. This is unique to <see cref="T:rainbowedit.Defenders" />.
            </summary>
        </member>
        <member name="F:rainbowedit.Weapon.Gadget.ObservationBlocker">
            <summary>
            Indicates than an <see cref="T:rainbowedit.Operator"/> may choose observation blockers during loadout selection. This is unique to <see cref="T:rainbowedit.Defenders" />.
            </summary>
        </member>
        <member name="M:rainbowedit.Weapon.#ctor(rainbowedit.Operator,System.String,rainbowedit.Weapon.WeaponType,rainbowedit.Weapon.FiringMode,System.Int32,System.Int32,System.Int32,rainbowedit.Weapon.Sight,rainbowedit.Weapon.Barrel,rainbowedit.Weapon.Grip,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:rainbowedit.Weapon"/> object with the given data.
            </summary>
            <param name="source">The <see cref="T:rainbowedit.Defender"/> this <see cref="T:rainbowedit.Weapon"/> belongs to.</param>
            <param name="name">The in-game name of the <see cref="T:rainbowedit.Weapon"/>.</param>
            <param name="type">The in-game <see cref="T:rainbowedit.Weapon.WeaponType"/> of the <see cref="T:rainbowedit.Weapon"/>.</param>
            <param name="fireMode">The in-game <see cref="T:rainbowedit.Weapon.FiringMode"/> the <see cref="T:rainbowedit.Weapon"/> uses.</param>
            <param name="damage">The damage this <see cref="T:rainbowedit.Weapon"/> deals when <i>not</i> equipped with a <see cref="F:rainbowedit.Weapon.Barrel.ExtendedBarrel"/>.</param>
            <param name="roundsPerMinute">The rounds per minute this <see cref="T:rainbowedit.Weapon"/> is capable of firing in-game.</param>
            <param name="capacity">The in-game magazine capacity of this <see cref="T:rainbowedit.Weapon"/>.</param>
            <param name="sights">A combination of <see cref="T:rainbowedit.Weapon.Sight"/> values that specifies which sights may be equipped on this <see cref="T:rainbowedit.Weapon"/>.</param>
            <param name="barrels">A combination of <see cref="T:rainbowedit.Weapon.Barrel"/> values that specifies which barrel extensions may be equipped on this <see cref="T:rainbowedit.Weapon"/>.</param>
            <param name="grips">A combination of <see cref="T:rainbowedit.Weapon.Grip"/> values that specifies which grips may be equipped on this <see cref="T:rainbowedit.Weapon"/>.</param>
            <param name="underbarrel">Whether an underbarrel laser may be equipped on this <see cref="T:rainbowedit.Weapon"/>.</param>
            <param name="reloadTactical">A <see cref="T:System.TimeSpan"/> instance that represents the amount of time it takes to perform a tactical reload with this <see cref="T:rainbowedit.Weapon"/> (a reload when there is a round chambered).</param>
            <param name="reloadEmpty">A <see cref="T:System.TimeSpan"/> instance that represents the amount of time it takes to perform an empty reload with this <see cref="T:rainbowedit.Weapon"/> (a reload when there is no round chambered).</param>
        </member>
        <member name="M:rainbowedit.Weapon.ToString">
            <inheritdoc/>
        </member>
        <member name="M:rainbowedit.Weapon.op_Implicit(rainbowedit.Weapon)~System.String">
            <summary>
            Implicitly converts a <see cref="T:rainbowedit.Weapon"/> to a <see cref="T:System.String"/> that represents the <see cref="T:rainbowedit.Weapon"/>.
            </summary>
            <param name="wep">The <see cref="T:rainbowedit.Weapon"/> to convert.</param>
        </member>
        <member name="M:rainbowedit.Weapon.GetRandomConfiguration">
            <summary>
            Creates a <see cref="T:rainbowedit.WeaponConfiguration"/> from all possible <see cref="P:rainbowedit.Weapon.Barrels"/>, <see cref="P:rainbowedit.Weapon.Grips"/>, <see cref="P:rainbowedit.Weapon.Sights"/> and <see cref="P:rainbowedit.Weapon.Underbarrel"/> options attachment combinations.
            </summary>
            <returns>A <see cref="T:rainbowedit.WeaponConfiguration"/> as described.</returns>
        </member>
        <member name="M:rainbowedit.Weapon.GetRawSightValue">
            <summary>
            Gets the raw value for the <see cref="P:rainbowedit.Weapon.Sights"/> property; that is, special flags such as <see cref="F:rainbowedit.Weapon.Sight.Invalid"/>, <see cref="!:Sight.None"/> or <see cref="!:Sight.Other"/> may be set. Comparisons using this value as opposed to <see cref="P:rainbowedit.Weapon.Sights"/> are considered undefined behavior.
            </summary>
            <returns>The internal unmodified value of the <see cref="P:rainbowedit.Weapon.Sights"/> property, which may contain special flags as described.</returns>
        </member>
        <member name="M:rainbowedit.Weapon.Resolve(System.String,System.Double)">
            <summary>
            Attempts to resolve a weapon name to the first <see cref="T:rainbowedit.Weapon"/> object that is found while enumerating <see cref="P:rainbowedit.Siege.DefAtk"/>.
            </summary>
            <param name="name">The case-insensitive weapon name to resolve to a <see cref="T:rainbowedit.Weapon"/> object.</param>
            <param name="similarityThreshold">How similar (in percent) an actual <see cref="P:rainbowedit.Weapon.Name"/> must be for the <see cref="T:rainbowedit.Weapon"/> to be considered a match for the specified <paramref name="name"/>. If not specified, a value is dynamically calculated based on the length of <paramref name="name"/>.</param>
            <returns>A <see cref="T:rainbowedit.Weapon"/> instance if one could be found with a matching <paramref name="name"/>. If no exact match could be found, a <see cref="T:rainbowedit.Weapon"/> instance whose name is sufficiently similar to an existing <see cref="T:rainbowedit.Weapon"/>'s name. If this also returns no match, <c>null</c>.</returns>
            <remarks>Do not rely on this to return a <see cref="T:rainbowedit.Weapon"/> instance usable for <see cref="T:rainbowedit.Weapon.Sight"/> data as loadouts are specific to an <see cref="T:rainbowedit.Operator"/>.</remarks>
        </member>
        <member name="T:rainbowedit.Randomizers">
            <summary>
            A collection of methods that fetch random information or configurations from the model classes in <see cref="T:rainbowedit.Siege"/>.
            <para/>Where a collection of <see cref="T:rainbowedit.Operator"/>s is returned, the collection is guaranteed to contain no duplicates and the contained <see cref="T:rainbowedit.Operator"/>s are sorted according to their in-game appearance; also see <see cref="P:rainbowedit.Operator.Comparer"/> and <see cref="M:rainbowedit.Operator.Order(System.Collections.Generic.IEnumerable{rainbowedit.Operator})"/>, <see cref="M:rainbowedit.Operator.Sort(System.Collections.Generic.ICollection{rainbowedit.Operator})"/> and <see cref="!:Operator.Sort(List&lt;Operator&gt;)"/>.
            </summary>
        </member>
        <member name="T:rainbowedit.Randomizers.Challenges">
            <summary>
            A collection of methods that generate random challenges in the style of <i>Ubisoft Connect</i> challenges.
            </summary>
        </member>
        <member name="F:rainbowedit.Randomizers.Challenges.ChallengeObjectiveMultiplier">
            <summary>
            The factor that is used to calculate the amount of... things you have to do.
            </summary>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.WinRoundsWith">
            <summary>
            Constructs a string describing the challenge of winning rounds using two specific <see cref="T:rainbowedit.Attackers"/> and <see cref="T:rainbowedit.Defenders"/> each.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.WeaponTypeEliminations">
            <summary>
            Constructs a string describing the challenge of eliminating opponents using <see cref="T:rainbowedit.Weapon"/>s of a specific <see cref="T:rainbowedit.Weapon.WeaponType"/>.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.OrganizationActiveDuty">
            <summary>
            Constructs a string describing the challenge of winning rounds using <see cref="T:rainbowedit.Operator"/>s belonging to a specific <see cref="P:rainbowedit.Operator.Organization"/>.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.AntiProjectile">
            <summary>
            Constructs a string describing the challenge of destroying <see cref="T:rainbowedit.Attackers"/>' projectiles or throwables using anti-projectile special abilities.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.AreaDenial">
            <summary>
            Constructs a string describing the challenge of damaging or performing area denial against opponents using suitable special abilities.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.ChemicalBonds">
            <summary>
            Constructs a string describing the challenge of eliminating, putting in DBNO or damaging opponents using suitable special abilities.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.DeployCams">
            <summary>
            Constructs a string describing the challenge of deploying cameras or suitable special abilities.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.DestroyObservation">
            <summary>
            Constructs a string describing the challenge of destroying or rendering observation tools useless using suitable special abilities.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.Disorient">
            <summary>
            Constructs a string describing the challenge of disorienting opponents using suitable special abilities.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.ExplosiveKills">
            <summary>
            Constructs a string describing the challenge of eliminating opponents using explosive gadgets or explosive special abilities.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.HardBreach">
            <summary>
            Constructs a string describing the challenge of breaching reinforcements ("hard-breaching") using suitable special abilities.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.Headshots">
            <summary>
            Constructs a string describing the challenge of eliminating opponents using headshots.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.Heal">
            <summary>
            Constructs a string describing the challenge of healing or reviving teammates using suitable special abilities.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.Kills">
            <summary>
            Constructs a string describing the challenge of eliminating opponents.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.Matches">
            <summary>
            Constructs a string describing the challenge of playing/winning Ranked/Unranked/Casual matches.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.Reveal">
            <summary>
            Constructs a string describing the challenge of revealing opponents by scanning them in observation tools or pinging their special abilities.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.Role">
            <summary>
            Constructs a string describing the challenge of winning rounds as a specific <see cref="T:rainbowedit.Operator"/> class.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.Stun">
            <summary>
            Constructs a string describing the challenge of stunning / blinding opponents using stun grenades or suitable special abilities.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.Suppressed">
            <summary>
            Constructs a string describing the challenge of eliminating opponents using suppressed weapons.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.TechAttackAtk">
            <summary>
            Constructs a string describing the challenge of destroying, disabling or rendering <see cref="T:rainbowedit.Defenders"/>' gadgets useless using suitable <see cref="T:rainbowedit.Attackers"/>' special abilities.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.TechAttackDef">
            <summary>
            Constructs a string describing the challenge of destroying, disabling or rendering <see cref="T:rainbowedit.Attackers"/>' gadgets useless using suitable <see cref="T:rainbowedit.Defenders"/>' special abilities.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.Trapper">
            <summary>
            Constructs a string describing the challenge of eliminating or putting in DBNO opponents using suitable trap-like special abilities.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.UnauthorizedAccess">
            <summary>
            Constructs a string describing the challenge of hacking <see cref="T:rainbowedit.Attackers"/>' drones or <see cref="T:rainbowedit.Defenders"/>' observation tools or special abilities.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.Challenges.Wallbangs">
            <summary>
            Constructs a string describing the challenge of eliminating opponents through penetrable surfaces.
            </summary>
            <returns>A string as described.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomOperator">
            <summary>
            Gets a random <see cref="T:rainbowedit.Operator"/>.
            </summary>
            <returns>A random <see cref="T:rainbowedit.Operator"/>.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomOperator(System.Func{rainbowedit.Operator,System.Boolean})">
            <summary>
            Gets a random <see cref="T:rainbowedit.Operator"/> from a pool of <see cref="T:rainbowedit.Operator"/>s defined by a <paramref name="filter"/> function.
            </summary>
            <param name="filter">The function that dictates which <see cref="T:rainbowedit.Operator"/>s are in the pool of <see cref="T:rainbowedit.Operator"/> to choose from.</param>
            <returns>A random <see cref="T:rainbowedit.Operator"/>.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomOperator(rainbowedit.Operator[])">
            <summary>
            Gets a random <see cref="T:rainbowedit.Operator"/> while excluding any number of them.
            </summary>
            <param name="filter">The set of <see cref="T:rainbowedit.Operator"/>s to exclude from the selection.</param>
            <returns>A random <see cref="T:rainbowedit.Operator"/>.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomOperators(System.Int32)">
            <summary>
            Gets a number of random <see cref="T:rainbowedit.Operator"/>s.
            </summary>
            <param name="count">The number of <see cref="T:rainbowedit.Operator"/>s to return.</param>
            <returns>A collection of random <see cref="T:rainbowedit.Operator"/>s.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomOperators(System.Int32,System.Func{rainbowedit.Operator,System.Boolean})">
            <summary>
            Gets a number of random <see cref="T:rainbowedit.Operator"/> from a pool of <see cref="T:rainbowedit.Operator"/>s defined by a <paramref name="filter"/> function.
            </summary>
            <param name="count">The number of <see cref="T:rainbowedit.Operator"/>s to return.</param>
            <param name="filter">The function that dictates which <see cref="T:rainbowedit.Operator"/>s are in the pool of <see cref="T:rainbowedit.Operator"/> to choose from.</param>
            <returns>A collection of random <see cref="T:rainbowedit.Operator"/>s.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomOperators(System.Int32,rainbowedit.Operator[])">
            <summary>
            Gets a number of random <see cref="T:rainbowedit.Operator"/> while excluding any number of them.
            </summary>
            <param name="count">The number of <see cref="T:rainbowedit.Operator"/>s to return.</param>
            <param name="filter">The set of <see cref="T:rainbowedit.Operator"/>s to exclude from the selection.</param>
            <returns>A collection of random <see cref="T:rainbowedit.Operator"/>s.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomDefender">
            <summary>
            Gets a random <see cref="T:rainbowedit.Defender"/> from the <see cref="T:rainbowedit.Defenders"/>.
            </summary>
            <returns>A random Defender's <see cref="T:rainbowedit.Defender"/>.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomDefender(System.Func{rainbowedit.Defender,System.Boolean})">
            <summary>
            Gets a random <see cref="T:rainbowedit.Defender"/> from a pool of <see cref="T:rainbowedit.Defenders"/> defined by a <paramref name="filter"/> function.
            </summary>
            <param name="filter">The function that dictates which <see cref="T:rainbowedit.Defender"/>s are in the pool of <see cref="T:rainbowedit.Defenders"/> to choose from.</param>
            <returns>A random Defender's <see cref="T:rainbowedit.Defender"/>.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomDefender(rainbowedit.Defender[])">
            <summary>
            Gets a random <see cref="T:rainbowedit.Defender"/> from the <see cref="T:rainbowedit.Defenders"/> while excluding any number of them.
            </summary>
            <param name="filter">The set of <see cref="T:rainbowedit.Defender"/>s to exclude from the selection.</param>
            <returns>A random Defender's <see cref="T:rainbowedit.Defender"/>.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomDefenders(System.Int32)">
            <summary>
            Gets a number of random <see cref="T:rainbowedit.Defender"/>s from the <see cref="T:rainbowedit.Defenders"/>.
            </summary>
            <param name="count">The number of <see cref="T:rainbowedit.Defender"/>s to return.</param>
            <returns>A collection of random Defenders' <see cref="T:rainbowedit.Defender"/>s.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomDefenders(System.Int32,System.Func{rainbowedit.Defender,System.Boolean})">
            <summary>
            Gets a number of random <see cref="T:rainbowedit.Defender"/>s from a pool of <see cref="T:rainbowedit.Defenders"/> defined by a <paramref name="filter"/> function.
            </summary>
            <param name="count">The number of <see cref="T:rainbowedit.Defender"/>s to return.</param>
            <param name="filter">The function that dictates which <see cref="T:rainbowedit.Defender"/>s are in the pool of <see cref="T:rainbowedit.Defenders"/> to choose from.</param>
            <returns>A collection of random Defenders' <see cref="T:rainbowedit.Defender"/>s.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomDefenders(System.Int32,rainbowedit.Operator[])">
            <summary>
            Gets a number of random <see cref="T:rainbowedit.Defenders"/>s while excluding any number of them.
            </summary>
            <param name="count">The number of <see cref="T:rainbowedit.Defender"/>s to return.</param>
            <param name="filter">The set of <see cref="T:rainbowedit.Defender"/>s to exclude from the selection.</param>
            <returns>A collection of random Defenders' <see cref="T:rainbowedit.Defender"/>s.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomAttacker">
            <summary>
            Gets a random <see cref="T:rainbowedit.Attacker"/> from the <see cref="T:rainbowedit.Attackers"/>.
            </summary>
            <returns>A random Attacker's <see cref="T:rainbowedit.Attacker"/>.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomAttacker(System.Func{rainbowedit.Attacker,System.Boolean})">
            <summary>
            Gets a random <see cref="T:rainbowedit.Attacker"/> from a pool of <see cref="T:rainbowedit.Attackers"/> defined by a <paramref name="filter"/> function.
            </summary>
            <param name="filter">The function that dictates which <see cref="T:rainbowedit.Attacker"/>s are in the pool of <see cref="T:rainbowedit.Attackers"/> to choose from.</param>
            <returns>A random Attacker's <see cref="T:rainbowedit.Attacker"/>.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomAttacker(rainbowedit.Attacker[])">
            <summary>
            Gets a random <see cref="T:rainbowedit.Attacker"/> from the <see cref="T:rainbowedit.Attackers"/> while excluding any number of them.
            </summary>
            <param name="filter">The set of <see cref="T:rainbowedit.Attacker"/>s to exclude from the selection.</param>
            <returns>A random Attacker's <see cref="T:rainbowedit.Attacker"/>.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomAttackers(System.Int32)">
            <summary>
            Gets a number of random <see cref="T:rainbowedit.Attacker"/>s from the <see cref="T:rainbowedit.Attackers"/>.
            </summary>
            <param name="count">The number of <see cref="T:rainbowedit.Attacker"/>s to return.</param>
            <returns>A collection of random Attackers' <see cref="T:rainbowedit.Attacker"/>s.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomAttackers(System.Int32,System.Func{rainbowedit.Attacker,System.Boolean})">
            <summary>
            Gets a number of random <see cref="T:rainbowedit.Attacker"/>s from a pool of <see cref="T:rainbowedit.Attackers"/> defined by a <paramref name="filter"/> function.
            </summary>
            <param name="count">The number of <see cref="T:rainbowedit.Attacker"/>s to return.</param>
            <param name="filter">The function that dictates which <see cref="T:rainbowedit.Attacker"/>s are in the pool of <see cref="T:rainbowedit.Attackers"/> to choose from.</param>
            <returns>A collection of random Attackers' <see cref="T:rainbowedit.Attacker"/>s.</returns>
        </member>
        <member name="M:rainbowedit.Randomizers.GetRandomAttackers(System.Int32,rainbowedit.Operator[])">
            <summary>
            Gets a number of random <see cref="T:rainbowedit.Attackers"/>s while excluding any number of them.
            </summary>
            <param name="count">The number of <see cref="T:rainbowedit.Attacker"/>s to return.</param>
            <param name="filter">The set of <see cref="T:rainbowedit.Attacker"/>s to exclude from the selection.</param>
            <returns>A collection of random Attackers' <see cref="T:rainbowedit.Attacker"/>s.</returns>
        </member>
        <member name="T:rainbowedit.Siege">
            <summary>
            General information.
            </summary>
        </member>
        <member name="P:rainbowedit.Siege.Attackers">
            <summary>
            Contains all <see cref="T:rainbowedit.Attackers"/> from the game.
            </summary>
        </member>
        <member name="P:rainbowedit.Siege.Defenders">
            <summary>
            Contains all <see cref="T:rainbowedit.Defenders"/> from the game.
            </summary>
        </member>
        <member name="P:rainbowedit.Siege.AtkDef">
            <summary>
            Contains all <see cref="T:rainbowedit.Operator"/>s defined in <see cref="P:rainbowedit.Siege.Attackers"/> and <see cref="P:rainbowedit.Siege.Defenders"/>, concatenated in that order.
            </summary>
        </member>
        <member name="P:rainbowedit.Siege.DefAtk">
            <summary>
            Contains all <see cref="T:rainbowedit.Operator"/>s defined in <see cref="P:rainbowedit.Siege.Defenders"/> and <see cref="P:rainbowedit.Siege.Attackers"/>, concatenated in that order.
            </summary>
        </member>
        <member name="P:rainbowedit.Siege.LongestOperatorNickname">
            <summary>
            The longest <see cref="P:rainbowedit.Operator.Nickname"/> there is.
            </summary>
        </member>
        <member name="P:rainbowedit.Siege.LongestWeaponName">
            <summary>
            The longest <see cref="P:rainbowedit.Weapon.Name"/> there is.
            </summary>
        </member>
        <member name="P:rainbowedit.Siege.LongestGadgetName">
            <summary>
            The longest <see cref="T:rainbowedit.Weapon.Gadget"/> name there is.
            </summary>
        </member>
        <member name="M:rainbowedit.Siege.LibInit">
            <summary>
            A method that is registered to be called by the runtime when the assembly is loaded.
            This forces the library to initialize most static classes present by accessing their properties.
            </summary>
        </member>
    </members>
</doc>
